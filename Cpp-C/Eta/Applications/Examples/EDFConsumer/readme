
rsslEDFConsumer Application Description

--------
Summary:
--------

This Elektron Direct Feed (EDF) example demonstrates consuming market data
from the feed components, requesting images from the snapshot server and 
processing updates on items of interest as they are received from the real time
feed. 
The example is implementing a simple gap detection algorithm.
When the gap is detected in the real time data the example will send
the gap request message to the gap request server. If the gap request
is fulfilled successfully the application will receive the gap fill data
on the gap fill connection.

The example requests and downloads global field set definitions from the Reference Data Server
for decoding the data from the snapshot and real time stream(s).
The example will also request and download the RDMFieldDictionary and the enumtype.def 
from the Reference Data Server when the dictionary files are not found in executable folder.

The example requests and downloads the symbol list from the Reference Data Server.
The symbol list response is processed and used to request items by symbol name. 
If items are not found in the symbol list they will not be requested.
When the requested item is found in symbol list response the application 
will use the information in the symbol list to only connect to the 
channels that are providing the requested item. The symbol list contains the 
index of the channels received in the source directory message that are 
providing the data for the items. 

This application provides an example mechanism for synchronizing messages
received from the snapshot server and real time stream(s).

This application is intended as a basic usage example. Some of the design choices 
were made to favor simplicity and readability over performance. This application  
is not intended to be used for measuring performance. 

NOTES:

- no reorder or buffer handing for the gap recovery is shown - example only dumps the gap 
	fill response - since the gap recover may be different for each client this is 
	an exercise for the client (to display the gap fill response make sure to specify -gfsVerbose)
- example assumes single service (first in the source directory)
- for either real time streams or gap fill streams (EDF may provide multiple interfaces, but the
	example supports only one of each)
- the example does not verify that the dictionary name exists or not before requesting the 
	dictionary or global set definitions (hard coded)
- 10 max items
- not intended to test performance

------------------
Setup Environment:
------------------

The following configuration files are optional:
- RDMFieldDictionary and enumtype.def, located in the etc directory.

For convenience, symbolic links for these files are created in the executable
folder when it is compiled. If the files are not in the executable folder
the application will request the dictionaries from the Reference Data Server.

-------------------
Command line usage:
-------------------  

Usage: EDFConsumer -rtda <address> -rtdp <port> [ -rtif <address | name> ] -ssa <address> -ssp <port> -grsa <address> -grsp <port> -gfsa <address> -gfsp <port> -gfif <address | name> -rdsa <address> -rfsp <port> -serviceId <id> [-mp <MarketPrice ItemName>] [-mbo <MarketByOrder ItemName>] [ -setdef <filename> ] [ -runTime <seconds> ] [ -rdx ] [ -rtdx ]
  -rtda specifies the address of the Realtime data feed.
  -rtdp specifies the port of the Realtime data feed.
  -rtif specifies the network interface (address or name) of the Realtime data feed.
  -ssa specifies the address of the Snapshot server.
  -ssp specifies the port of the Snapshot server.
  -grsa specifies the address of the Gap Request server.
  -grsp specifies the port of the Gap Request server.
  -gfsa specifies the address of the Gap Fill server.
  -gfsp specifies the port of the Gap Fill server.
  -gfif specifies the  network interface (address or name) of the Gap Fill data feed.
  -rdsa specifies the address of the Ref Data server.
  -rdsp specifies the port of the Ref Data server.
  -serviceId specifies the id of the service to be used.
  -mbo For each occurrence, requests item using Market By Order domain.
  -mp For each occurrence, requests item using Market Price domain.
  -setDefFileName specifies the global set definition file name.
  -setDefDictName specifies the global set definition dictionary name to be requested from Ref Data Server.
  -gfsVerbose specifies the output type for Gap Fill server.
  -rtdVerbose specifies the output type for Realtime data feed.
  -runTime specifies the running time of the application.
  -rdx enables xml tracing of messages on reference data connection.
  -rtdx enables xml tracing of messages on real time data connection.

The arguments -rtif, -gfif, -rdsa, -rdsp and -mbo|mp must be specified.

-----------------
Compiling Source:
-----------------

The included makefile is set up to run from the file
locations as presented through the distribution package.
It is set up for building on the UPA supported 
Linux and Solaris platforms using the supported compilers.

The LINKTYPE value in the makefile is used to control
whether the application is built using UPA static or
shared libraries. The default build uses UPA static
libraries. To use UPA shared libraries,
set LINKTYPE=Shared.

To compile, run the gmake command.

Gmake can be obtained at http://www.gnu.org/software/make/


For windows platform, using Visual Studio, open one of the included vcxproj project
files and build.

----------------
Example Content:
----------------

Included for this application are:

- Source files.

- This document.

--------------------
Detailed Description
--------------------

rsslEDFConsumer.c -- Main application file.  Initializes components and performs
  the main loop that reads from the network.

edfExampleConfig.c -- Handles configuration for the application.

itemList.c -- Handles the states of items in which the consumer is interested, based on
  messages received from the snapshot server and real time stream(s).

msgQueue.c -- A queue of messages. Used when synchronizing snapshot server data with
  real time stream(s).

realTimeSession.c -- Handles the real time streams channel, reading messages.

gapFillSession.c -- Handles the gap fill data channel, reading messages.

rsslMarketByOrderHandler.c -- Decoder for Market By Order domain messages.

rsslMarketPriceHandler.c -- Decoder for Market Price domain messages.

rsslMarketByPriceHandler.c -- Decoder for Market By Price domain messages.

rsslSetDefFileDecoder.c -- Loads the set definition file.

snapshotSession.c -- Handles the channel connected to the snapshot server, logging in and
  requesting image data.

gapRequestSession.c -- Handles the channel connected to the gap request server, logging in and
  requesting gap fill data.

refDataServer.c -- Handles the channel connected to the reference data server, logging in and
  requesting a source directory message, request global set definition, symbol list and dictionary.

