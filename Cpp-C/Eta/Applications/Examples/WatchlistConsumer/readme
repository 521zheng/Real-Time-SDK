rsslWatchlistConsumer Application Description

--------
Summary:
--------

The purpose of this application is to demonstrate consuming data from an 
ADS device or OMM Provider application using ValueAdd components.  It is a 
single-threaded client application.

This application leverages the consumer watchlist feature provided by the
RsslReactor to provide recovery and aggregation of items. Using the 
consumer watchlist feature also enables this application to consume
from either an OMM Provider or ADS over a socket-based connection, or from
an ADS over a multicast network.  It requests items within the 
channelOpenCallback function, which are automatically requested by the
RsslReactor on its behalf when the channel connects to the providing component.

If the dictionary is found in the directory of execution, then it is loaded
directly from the file.  However, the default configuration for this application
is to request the dictionary from the provider.  Hence, no link to the dictionary
is made in the execution directory by the build script.  The user can change this
behavior by manually creating a link to the dictionary in the execution directory.

This application supports consuming Level I Market Price, Level II Market 
By Order, Level II Market By Price, and Yield Curve. This application 
optionally performs on-stream posting for Level I Market Price content.  

This application supports a symbol list request. When requesting a symbol
list, it also requests that the RsslReactor automatically open streams
using the item names that appear in the list.

This application can optionally perform on-stream and off-stream posting for Level I
Market Price content. The item name used for an off-stream post is "OFFPOST". For
simplicity, the off-stream post item name is not configurable, but users can modify
the code if desired.

This application can open tunnel streams to a provider that supports them (via the -tunnel option),
such as the included provider example, or to a queue provider service for queue messaging (see
options such as -qSourceName).

This application is intended as a basic usage example.  Some of the design 
choices were made to favor simplicity and readability over performance.  
This application is not intended to be used for measuring performance.

 
-----------------
Application Name:
-----------------

WatchlistConsumer

------------------
Setup Environment:
------------------

The RDMFieldDictionary and enumtype.def files located in the etc directory
can be located in the directory of execution.  If the dictionary files
cannot be found, they are requested from the provider.

-------------------
Command line usage:
-------------------  

WatchlistConsumer

(runs with a default set of parameters (-h localhost -p 14002 -s DIRECT_FEED -mp TRI))

or

WatchlistConsumer or WatchlistConsumer [ -c <Connection Type> ] 
  [ -if <Interface Name> ] [ -u <Login UserName> ] [-s <ServiceName>] 
  [ -mp <MarketPrice ItemName> ] [ -mbo <MarketByOrder ItemName> ] 
  [ -mbp <MarketByPrice ItemName> ] [ -yc <YieldCurve ItemName> ] 
  [ -sl <SymbolList ItemName> ] [ -sld <SymbolList ItemName> ] [ -view ] [ -runTime <TimeToRun> ]
  [-at <AuthenticationToken>] [-ax <AuthenticationExtended>] [-aid <ApplicationId>]

  Connection options for socket, http, and encrypted connection types:
    [ -h <Server Hostname> ] [ -p <Port> ]

  Connection options for the reliable multicast connection type; all must be specified:
    [ -sa <Send Address> ] [ -ra <Receive Address> ] [ -sp <Send Port> ] [ -rp <Receive Port> ]
	[ -up <Unicast Port> ]

  Options for publishing Host Stat Message options on reliable multicast connections; -hsmAddr and -hsmPort must be specified to enable:
    [ -hsmAddr <Address> ] [ -hsmPort <Port> ] [ -hsmInterface <Interface Name> ] [ -hsmInterval <seconds> ]

  Options for tunnel stream messaging/queue messaging:
    [-tunnel] [-tsAuth] [ -qSourceName <name> ] [ -qDestName <name> ] [-tsServiceName <name> ]

The -c option specifies the connection type. Valid arguments are socket, http, encrypted, and 
reliableMCast.  When using a socket, http, or encrypted connection, use the -h and -p options
to configure the address and port for connecting. When using a reliableMcast connection,
use the -sa, -ra, -sp, -rp, and -up options to configure the multicast network.

The user can specify multiple instances of -mp, -mbo, -mbp, -yc, -sl and -sld,
where each occurrence is associated with a single item. For example, 
specifying "-mp TRI -mp GOOG -mbo AAPL" will issue requests for two 
MarketPrice items and one MarketByOrder item.  The -sld option is like the -sl 
option, but will request that data streams be opened for items present in the 
symbol list response.

Specifying the -view option results in a dynamic view request for any MarketPrice
items.  If the provider does not indicate support for dynamic views, the RsslReactor will forward
the item request without the view.

Specifying the -post option enables the consumer application to attempt on-stream
posting to the provider. When a provider supports posting, the consumer will post to
the first successfully established MarketPrice stream. If no MarketPrice items are 
requested, on-stream posting will be disabled. While on-stream posting, the application
will alternate between a Post message that contains another message and a Post message
that contains only data payload. 

The -qSourceName option enables queue messaging and specifies a name of a queue to open. 

The -qDestName option specifies the name of a queue to which the consumer will send messages. 
This option requires -qSourceName to be specified.  This option may be specified multiple times 
to send to multiple destinations.

The -tsServiceName option may be used to specify the name of the service used for tunnel stream
messaging or queue messaging. If not specified, the service name used will be the same as the 
service name specified by the -s option.

The -tsAuth option causes the consumer to use authentication when performing tunnel stream
messaging or queue messaging (it is applied to either).  

The -tsDomain option specifies the domainType to use when opening the tunnel stream,
for the simple tunnel messaging or queue messaging.

Specifying the -at option configures the token used for TREP Authentication.  This should be used 
in place of a userName.  This token is retrieved from a token generator, and passed to TREP, which
will verify the token against a token validator.  For more information about the TREP Authentication
feature, please see the Developers guide and the TREP Authentication guide.

Specifying the -ax option configures the authentication extended information used for TREP Authentication.

Specifying the -aid option configures the Application Id.

Specifying the -runTime option controls the time the application will run
before exiting, in seconds.

- WatchlistConsumer -? displays command line options.  


-----------------
Compiling Source:
-----------------

The included makefile is set up to run from the file
locations as presented through the distribution package.
It is set up for building on the Transport API supported 
Solaris or Linux platforms using the supported compilers.

The VA_CUSTOM_BUILT_LIBS value in the makefile is used to 
link in the Transport API ValueAdd components compiled from the provided
source code.  If a custom library is used, VA_CUSTOM_BUILT_LIBS 
should be set to Yes.  In addition, the user should point the 
VA_INCLUDE locations to the location where the directory of 
the current platform's library is built.

The LINKTYPE value in the makefile is used to control
whether the application is built using Transport API static or
shared libraries. The default build uses Transport API static
libraries. To use Transport API shared libraries,
set LINKTYPE=Shared.

To compile, run the gmake command.

Gmake can be obtained at http://www.gnu.org/software/make/

----------------
Example Content:
----------------

Included for this application are:

- Source files.

- This document.

--------------------
Detailed Description
--------------------

rsslWatchlistConsumer.c - The main file for the rsslWatchlistConsumer application.

itemDecoder.c - Contains decoding logic for the different item domains.

postHandler.c - Handles encoding and sending of on-stream and off-stream post messages.

queueMsgHandler.c - Provides functionality for sending and receiving queue messages via a tunnel stream.

watchlistConsumerConfig.c - Handles configuration options for the consumer application.
