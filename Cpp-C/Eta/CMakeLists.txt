
project(Eta 
		VERSION ${INTERNAL_API_VERSION_MAJOR}.${esdk_VERSION_MINOR}.${esdk_VERSION_PATCH}.${esdk_VERSION_TWEAK}
		LANGUAGES C CXX)

DEBUG_PRINT(Eta_VERSION)

#Setup version file generation.
set(m1 "n AUTO GENERATED" )
set(m2 "NOT" )
configure_file(${Eta_SOURCE_DIR}/Include/rsslVersion.h.in ${Eta_SOURCE_DIR}/Include/rsslVersion.h @ONLY)
set(m1)
set(m2)

if (NOT RCDEV_REL_${PROJECT_NAME}_LIB_DIR)
    set(RCDEV_REL_${PROJECT_NAME}_LIB_DIR ${PROJECT_NAME}/Libs)
endif()

if (NOT RCDEV_REL_${PROJECT_NAME}_BIN_DIR)
    set(RCDEV_REL_${PROJECT_NAME}_BIN_DIR ${PROJECT_NAME}/Executables)
endif()

# Save off the original CMAKE_<XXX>_OUTPUT_DIRECTORY prefix.  This  is mainly
# for WIN32 output crossover with DLL going to _RUNTIME_, etc....
set(ORIG_CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
set(ORIG_CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
set(ORIG_CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

if( CMAKE_HOST_UNIX )
    string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY 
                        "/${RCDEV_REL_${PROJECT_NAME}_BIN_DIR}/${RCDEV_POST_PREFIX_PATH}")
    string(APPEND CMAKE_ARCHIVE_OUTPUT_DIRECTORY
                        "/${RCDEV_REL_${PROJECT_NAME}_LIB_DIR}/${RCDEV_POST_PREFIX_PATH}")
    string(APPEND CMAKE_LIBRARY_OUTPUT_DIRECTORY
                        "/${RCDEV_REL_${PROJECT_NAME}_LIB_DIR}/${RCDEV_POST_PREFIX_PATH}/Shared")
else()
	list(APPEND _type_list RUNTIME ARCHIVE LIBRARY PDB )
	foreach(_type IN LISTS _type_list)
		# Save off the original CMAKE_<XXX>_OUTPUT_DIRECTORY prefix.  This  is mainly
		# for WIN32 output crossover with DLL going to _RUNTIME_, etc....
		set(ORIG_CMAKE_${_type}_OUTPUT_DIRECTORY_DEBUG_MDD ${CMAKE_${_type}_OUTPUT_DIRECTORY_DEBUG_MDD})
		set(ORIG_CMAKE_${_type}_OUTPUT_DIRECTORY_RELEASE_MD ${CMAKE_${_type}_OUTPUT_DIRECTORY_RELEASE_MD})
		string(APPEND CMAKE_${_type}_OUTPUT_DIRECTORY_DEBUG_MDD
							"/${RCDEV_REL_${PROJECT_NAME}_LIB_DIR}/${RCDEV_POST_PREFIX_PATH_DEBUG_MDD}")
		string(APPEND CMAKE_${_type}_OUTPUT_DIRECTORY_RELEASE_MD
							"/${RCDEV_REL_${PROJECT_NAME}_LIB_DIR}/${RCDEV_POST_PREFIX_PATH_RELEASE_MD}")
	endforeach()
endif()

if( CMAKE_HOST_UNIX )
    find_package(OpenSSL REQUIRED)
endif()

add_subdirectory( Impl )

# libxml2
add_subdirectory( Utils/Libxml2 )

if( CMAKE_HOST_WIN32 )
	# Reset to the original CMAKE_<XXX>_OUTPUT_DIRECTORY prefix for executables
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG_MDD ${ORIG_CMAKE_RUNTIME_OUTPUT_DIRECTORY})
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE_MD ${ORIG_CMAKE_RUNTIME_OUTPUT_DIRECTORY})

	string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG_MDD
                       "/${RCDEV_REL_${PROJECT_NAME}_BIN_DIR}/${RCDEV_POST_PREFIX_PATH_DEBUG_MDD}")
	string(APPEND CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE_MD
                       "/${RCDEV_REL_${PROJECT_NAME}_BIN_DIR}/${RCDEV_POST_PREFIX_PATH_RELEASE_MD}")
	
	set(CMAKE_PDB_OUTPUT_DIRECTORY_DEBUG_MDD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG_MDD})
	set(CMAKE_PDB_OUTPUT_DIRECTORY_RELEASE_MD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE_MD})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG_MDD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG_MDD})
    set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE_MD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE_MD})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG_MDD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG_MDD})
    set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE_MD ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE_MD})
							
endif()

if (BUILD_ETA_APPLICATIONS)
    DEBUG_PRINT(BUILD_ETA_APPLICATIONS)
    add_subdirectory( Applications )
else()
    message(STATUS 
            "Skipping Eta Applications Build: BUILD_ETA_APPLICATIONS:${BUILD_ETA_APPLICATIONS}")
endif()

# unit tests
if (BUILD_ETA_UNIT_TESTS)
    DEBUG_PRINT(BUILD_ETA_UNIT_TESTS)
    add_subdirectory( TestTools/UnitTests )
else()
    message(STATUS 
            "Skipping Eta Unit Tests Build: BUILD_ETA_UNIT_TESTS:${BUILD_ETA_UNIT_TESTS}")
endif()

# doxygen
if (BUILD_ETA_DOXYGEN)
    add_subdirectory( Docs/doxygen )
else()
    message(STATUS 
            "Skipping Eta Doxygen Build: BUILD_ETA_DOXYGEN:${BUILD_ETA_DOXYGEN}")
endif()

