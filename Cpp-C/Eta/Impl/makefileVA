#Sets the root directory for this package
ROOTPLAT=..
#If User wants to build with Optimized_Assert builds, change LIBTYPE=Optimized_Assert
ifeq ($(LIBTYPE),)
	LIBTYPE=Optimized
endif


ARCHTYPE=$(shell uname -m)
ifeq ($(ARCHTYPE),i86pc)	
	LIB_DIR=Libs/SOL10_X64_64_SS12/$(LIBTYPE)
	RSSL_LIB_DIR=$(ROOTPLAT)/Libs/SOL10_X64_64_SS12/$(LIBTYPE)
	OUTPUT_DIR=$(ROOTPLAT)/Libs/SOL10_X64_64_SS12/$(LIBTYPE)
	CFLAGS = -m64 -xtarget=opteron -xarch=sse2 -nofstore -xregs=frameptr -Di86pc -Di86pc_SunOS_510_64 -KPIC 
else
	#
	# assume this is some type of Linux 
	#
	OS_VER=$(shell lsb_release -r | sed 's/\.[0-9]//')
	DIST=$(shell lsb_release -i)
	CFLAGS = -m64 

	# check for RedHat Linux first
	ifeq ($(findstring RedHat,$(DIST)),RedHat)
		ifeq ($(findstring 5, $(OS_VER)), 5)
       		#AS5 
		   	LIB_DIR=Libs/RHEL5_64_GCC412/$(LIBTYPE)
		   	RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
		   	OUTPUT_DIR=./RHEL5_64_GCC412/$(LIBTYPE)
		else
			# assume AS6 (or greater)
			LIB_DIR=$(ROOTPLAT)/Libs/RHEL6_64_GCC444/$(LIBTYPE)
			RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL6_64_GCC444/$(LIBTYPE)
			OUTPUT_DIR=$(ROOTPLAT)/Libs/RHEL6_64_GCC444/$(LIBTYPE)
		endif
	else 
		ifeq ($(findstring SUSE,$(DIST)),SUSE)	 # check for SUSE Linux
			ifeq ($(findstring 11, $(OS_VER)), 11)
				# use AS5 for SUSE 11 (or greater)
				LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
				RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
				OUTPUT_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
			else
				# if we dont know what it is, assume AS5 
				LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
				RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
				OUTPUT_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
			endif
		else
			ifeq ($(findstring CentOS,$(DIST)),CentOS)
				# assume Oracle 7 (or greater)
				LIB_DIR=$(ROOTPLAT)/Libs/OL7_64_GCC482/$(LIBTYPE)
				RSSL_LIB_DIR=$(ROOTPLAT)/Libs/OL7_64_GCC482/$(LIBTYPE)
				OUTPUT_DIR=$(ROOTPLAT)/Libs/CENTOS7_64_GCC482/$(LIBTYPE)
			else
				DIST=$(shell cat /etc/oracle-release)
				ifeq ($(findstring Oracle,$(DIST)),Oracle)  # check for Oracle Linux
					ifeq ($(findstring 5, $(OS_VER)), 5)
						#AS5 			
						LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
						RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL5_64_GCC412/$(LIBTYPE)
						OUTPUT_DIR=$(ROOTPLAT)/Libs/OL5_64_GCC412/$(LIBTYPE)
					else
						ifeq ($(findstring 6, $(OS_VER)), 6)
							# AS6
							LIB_DIR=$(ROOTPLAT)/Libs/RHEL6_64_GCC444/$(LIBTYPE)
							RSSL_LIB_DIR=$(ROOTPLAT)/Libs/RHEL6_64_GCC444/$(LIBTYPE)
							OUTPUT_DIR=$(ROOTPLAT)/Libs/OL6_64_GCC444/$(LIBTYPE)
						else
							# assume AS7 (or greater)
							LIB_DIR=$(ROOTPLAT)/Libs/OL7_64_GCC482/$(LIBTYPE)
							RSSL_LIB_DIR=$(ROOTPLAT)/Libs/OL7_64_GCC482/$(LIBTYPE)
							OUTPUT_DIR=$(ROOTPLAT)/Libs/OL7_64_GCC482/$(LIBTYPE)
						endif
					endif
				endif
			endif
		endif
	endif
endif

CFLAGS += -D_SVID_SOURCE=1 -DCOMPILE_64BITS 
HEADER_INC = -I$(ROOTPLAT)/Include/Reactor/ -I$(ROOTPLAT)/Include/RDM/ -I$(ROOTPLAT)/Include/Util -I$(ROOTPLAT)/Impl/Reactor/Util/ -I$(ROOTPLAT)/Impl/Reactor/ -I$(ROOTPLAT)/Impl/Reactor/Watchlist/ -I$(ROOTPLAT)/Impl/Reactor/TunnelStream/ -I$(ROOTPLAT)/Include/RDM/ -I$(ROOTPLAT)/Include/Codec/ -I$(ROOTPLAT)/Include/Transport/

EXE_DIR=$(OUTPUT_DIR)
LN_HOMEPATH=../..
RSSL_LIB_PATH = -L$(RSSL_LIB_DIR)
RSSL_LIB = -lrssl

OS_NAME= $(shell uname -s)
ifeq ($(OS_NAME), SunOS)
	export CC=/tools/SunStudio12/SUNWspro/bin/cc
	CFLAGS +=  -Dsun4_SunOS_5X -DSYSENT_H -DSOLARIS2 -xlibmil -xlibmopt -xbuiltin=%all -mt -R $(RSSL_LIB_DIR)/Shared
	LNCMD = ln -s
	SONAME_OPT=-G -h
endif

ifeq ($(OS_NAME), Linux)
    export COMPILER=gnu
    export CC=/usr/bin/gcc -fPIC -ggdb3
	CFLAGS += -DLinux -Dx86_Linux_4X -Dx86_Linux_5X -DLinuxVersion=5 -D_iso_stdcpp_ -D_BSD_SOURCE=1 -D_POSIX_SOURCE=1 -D_POSIX_C_SOURCE=199506L -D_XOPEN_SOURCE=500  -D_POSIX_PTHREAD_SEMANTICS -D_GNU_SOURCE
	LNCMD = ln -is
	SONAME_OPT=-shared -Wl,-soname,
endif

$(OUTPUT_DIR)/obj/Dummy/%.o : %.c
	rm -f $@
	mkdir -p $(dir $@)
	$(CC)  -c $(CFLAGS) $(HEADER_INC) -o $@ $<

$(OUTPUT_DIR)/obj/%.o : %.c
	rm -f $@
	mkdir -p $(dir $@)
	$(CC)  -c $(CFLAGS) $(HEADER_INC) -o $@ $<


$(OUTPUT_DIR)/%.o : %.c
	rm -f $@
	mkdir -p $(dir $@)
	$(CC)  -c $(CFLAGS) $(HEADER_INC) -o $@ $<


main: librsslReactor.a librsslRDM.a librsslVAUtil.a librsslVA.so 

librsslVAUtil_src = \
	Util/rsslMemoryBuffer.c \
	Util/rsslHashTable.c

librsslVAUtil_objs = $(addprefix $(OUTPUT_DIR)/obj/,$(librsslVAUtil_src:%.c=%.o))

librsslRDM_src = \
	RDM/rsslRDMLoginMsg.c \
	RDM/rsslRDMDirectoryMsg.c \
	RDM/rsslRDMDictionaryMsg.c \
	RDM/rsslRDMQueueMsg.c

librsslRDM_objs = $(addprefix $(OUTPUT_DIR)/obj/,$(librsslRDM_src:%.c=%.o))

librsslReactor_src = \
	Reactor/rsslReactor.c \
	Reactor/rsslReactorWorker.c \
	Reactor/TunnelStream/bufferPool.c \
	Reactor/TunnelStream/bigBufferPool.c \
	Reactor/TunnelStream/tunnelManager.c \
	Reactor/TunnelStream/msgQueueEncDec.c \
	Reactor/TunnelStream/persistFile.c \
	Reactor/TunnelStream/rsslRDMQueueMsgInt.c \
	Reactor/TunnelStream/rsslTunnelStream.c \
	Reactor/TunnelStream/tunnelStreamImpl.c \
	Reactor/TunnelStream/tunnelSubstream.c \
	Reactor/Watchlist/rsslWatchlistImpl.c \
	Reactor/Watchlist/wlPostIdTable.c \
	Reactor/Watchlist/wlView.c \
	Reactor/Watchlist/wlBase.c \
	Reactor/Watchlist/wlService.c \
	Reactor/Watchlist/wlItem.c \
	Reactor/Watchlist/wlSymbolList.c \
	Reactor/Watchlist/wlDirectory.c \
	Reactor/Watchlist/wlLogin.c \
	Reactor/Watchlist/wlMsgReorderQueue.c \
	Reactor/Watchlist/wlServiceCache.c 

librsslReactor_objs = $(addprefix $(OUTPUT_DIR)/obj/,$(librsslReactor_src:%.c=%.o))

librsslVA_objs =  $(librsslVAUtil_objs) $(librsslRDM_objs) $(librsslReactor_objs)

librsslVAUtil.a : $(librsslVAUtil_objs)
	mkdir -p $(EXE_DIR)
	ar -ruv $(EXE_DIR)/librsslVAUtil.a $(librsslVAUtil_objs) 

librsslRDM.a : librsslVAUtil.a $(librsslRDM_objs)
	mkdir -p $(EXE_DIR)
	ar -ruv $(EXE_DIR)/librsslRDM.a $(librsslRDM_objs) 

librsslReactor.a : librsslVAUtil.a librsslRDM.a $(librsslReactor_objs)
	mkdir -p $(EXE_DIR)
	ar -ruv $(EXE_DIR)/librsslReactor.a $(librsslReactor_objs)

librsslVA.so : librsslVA.so.9 
	( cd $(EXE_DIR)/Shared; rm -f librsslVA.so; ln -s librsslVA.so.9  librsslVA.so; )

librsslVA.so.9  : $(librsslVA_objs)
	mkdir -p $(EXE_DIR)/Shared
	$(CC) $(CFLAGS) -o $(EXE_DIR)/Shared/$@ $(librsslVA_objs)  $(SONAME_OPT)$@ $(RSSL_LIB_PATH)/Shared $(RSSL_LIB) $(SYSTEM_LIBS)

clean: 
	rm -f $(OUTPUT_DIR)/librsslVAUtil*
	rm -f $(OUTPUT_DIR)/librsslRDM.*
	rm -f $(OUTPUT_DIR)/Shared/librsslVA.*
	rm -f $(OUTPUT_DIR)/librsslReactor.*
	rm -rf $(OUTPUT_DIR)/obj

