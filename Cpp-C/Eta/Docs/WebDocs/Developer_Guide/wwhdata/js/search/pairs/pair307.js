function FileData_Pairs(x)
{
x.t("example","demonstrates");
x.t("example","function");
x.t("example","chapter");
x.t("example","section");
x.t("example","encodes");
x.t("example","additional");
x.t("example","following");
x.t("example","rsslvector");
x.t("m.parentnode.insertbefore","window");
x.t("else","vector");
x.t("pencseries","rsslbuffer");
x.t("parameter","false");
x.t("parameter","true");
x.t("version","information");
x.t("clear","clear");
x.t("clear","action");
x.t("clear","entry");
x.t("clear","begin");
x.t("rsslencodevectorentryinit","&enciter");
x.t(".l=1","new");
x.t("create","single");
x.t("create","ua-55718642-4");
x.t("init","done");
x.t("init","encoding");
x.t("refer","example");
x.t("unencoded","data");
x.t("unencoded","series");
x.t("vectorentry.permdata.data","ppermdata-");
x.t("summary","data");
x.t("action","type");
x.t("action","payload");
x.t("action","perm");
x.t("rsslretcodeinfo","(retval)");
x.t("rsslclearseries","&rsslseries");
x.t("flag","vectorentry.flags");
x.t("container","types");
x.t("container","using");
x.t("container","encoding");
x.t("&vectorentry","complete");
x.t("&vectorentry","third");
x.t("&vectorentry","vectorentry.index");
x.t("&vectorentry","encode");
x.t("roll","back");
x.t("-----","continue");
x.t("vectorentry.action","rssl_vtef_set_entry");
x.t("vectorentry.action","rssl_vtef_clear_entry");
x.t("vectorentry.action","rssl_vtef_update_entry");
x.t("sample","demonstrates");
x.t("type","payload");
x.t("type","match");
x.t("payload","example");
x.t("payload","clear");
x.t("payload","data");
x.t("populate","vector");
x.t("populate","containertype");
x.t("populate","index");
x.t("enciter","already");
x.t("retval","rsslencodevectorentryinit");
x.t("retval","rsslretcodeinfo");
x.t("retval","rsslencodeseriescomplete");
x.t("retval","rsslencodeseriesinit");
x.t("retval","rsslencodevectorsummarydatacomplete");
x.t("retval","rsslencodevectorcomplete");
x.t("retval","rsslencodevectorinit");
x.t("retval","rsslencodevectorentrycomplete");
x.t("retval","rsslencodevectorentry");
x.t("rsslencodeseriescomplete","&enciter");
x.t("vector","init");
x.t("vector","rsslclearseries");
x.t("vector","retval");
x.t("vector","assumes");
x.t("vector","entry");
x.t("vector","structure");
x.t("vector","encoding");
x.t("total","count");
x.t("a=s.createelement","(o)");
x.t("rsslencodeseriesinit","indicate");
x.t("rsslencodeseriesinit","&enciter");
x.t("count","hint");
x.t("assumes","enciter");
x.t("back","success");
x.t("back","encoding");
x.t("text","printf");
x.t("text","s\\n");
x.t("new","date");
x.t("rssl_false","print");
x.t("single","rsslvectorentry");
x.t("rssl_init_vector_entry","rsslseries");
x.t("rsslencodevectorsummarydatacomplete","&enciter");
x.t("document","script");
x.t("printf","error");
x.t("pageview","transport");
x.t("rssl_vtef_set_entry","vectorentry.permdata.length");
x.t("complete","vector");
x.t("complete","nested");
x.t("complete","encoding");
x.t("flags","none");
x.t("api","edition");
x.t("entry","clear");
x.t("entry","unencoded");
x.t("entry","pre-encoded");
x.t("entry","encoded");
x.t("entry","map");
x.t("entry","safety");
x.t("entry","rsslvectorentry");
x.t("entry","vectorentry.index");
x.t("entry","encode");
x.t("entry","encoding");
x.t("pre-encoded","payload");
x.t("pre-encoded","series");
x.t("pre-encoded","buffer");
x.t("pencseries-","length");
x.t("pencseries-","data");
x.t("false","roll");
x.t("false","retval");
x.t("true","finalize");
x.t("demonstrates","error");
x.t("demonstrates","encode");
x.t("functionality","implicitly");
x.t("populated","ppermdata");
x.t("populated","buffer");
x.t("approximate","encoded");
x.t("ppermdata","contains");
x.t("bytes","retval");
x.t("bytes","populate");
x.t("rssl_vtef_none","vectorentry.action");
x.t("window","document");
x.t("prior","rsslencodevectorinit");
x.t("prior","call");
x.t("vectorentry.flags","rssl_vtef_none");
x.t("vectorentry.flags","rssl_vtef_has_perm_data");
x.t("none","rsslclearvectorentry");
x.t("indicate","summary");
x.t("rsslvector.totalcounthint","begin");
x.t("determine","success");
x.t("rssl_init_series","encode");
x.t("continue","encoding");
x.t("encoded","unencoded");
x.t("encoded","length");
x.t("encoded","rsslvector.flags");
x.t("encoded","rsslseries");
x.t("encoded","buffer");
x.t("rsslvector.containertype","rssl_dt_series");
x.t("rsslvector.containertype","encode");
x.t("map","encoding");
x.t("rsslencodevectorcomplete","&enciter");
x.t("third","clear");
x.t("third","vector");
x.t("string","value");
x.t("rssl_vtef_has_perm_data","vectorentry.action");
x.t("ppermdata-","length");
x.t("ppermdata-","data");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("three","rsslvectorentry");
x.t("second","vector");
x.t("second","entry");
x.t("auto","send");
x.t("simplify","example");
x.t("begin","encoding");
x.t("store","return");
x.t("rsslencodevectorinit","type");
x.t("rsslencodevectorinit","retval");
x.t("rsslencodevectorinit","error");
x.t("rsslencodevectorinit","&enciter");
x.t("functions","clear");
x.t("functions","begin");
x.t("failed","success");
x.t("error","text");
x.t("error","handling");
x.t("error","condition");
x.t("error","encountered");
x.t("first","vector");
x.t("first","entry");
x.t("rsslencodevectorentrycomplete","&enciter");
x.t("rsslclearvectorentry","&vectorentry");
x.t("containertype","total");
x.t("&rsslseries","retval");
x.t("&rsslseries","rssl_ret_success");
x.t("function","simplify");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("length","vectorentry.permdata.data");
x.t("length","populated");
x.t("length","bytes");
x.t("length","vectorentry.encdata.data");
x.t("hint","encoded");
x.t("hint","rsslvector.containertype");
x.t("(retval)","else");
x.t("(retval)","retval");
x.t("chapter","data");
x.t("11.3.4.5","complete");
x.t("index","action");
x.t("detailed","view");
x.t("transport","api");
x.t("handling","initial");
x.t("handling","omitted");
x.t("rssl_dt_series","rsslvector.totalcounthint");
x.t("match","rsslvector.containertype");
x.t("section","11.3.4.5");
x.t("section","11.3.4");
x.t("types","11.3.5");
x.t("initial","encode");
x.t("omitted","performed");
x.t("switch","success");
x.t("expected","summary");
x.t("permdata","entry");
x.t("code","example");
x.t("return","value");
x.t("rssl_vtf_has_per_entry_perm","flag");
x.t("safety","flags");
x.t("encodes","three");
x.t("rsslvectorentry","rsslseries");
x.t("rsslvectorentry","values");
x.t("rsslvectorentry","vectorentry");
x.t("rssl_vtf_has_per_entry_perm_data","populate");
x.t("message","return");
x.t("rsslvector.flags","rssl_vtf_has_summary_data");
x.t("rsslseries","rssl_init_series");
x.t("rsslseries","rsslseries");
x.t("rsslseries","assuming");
x.t("rsslseries","values");
x.t("rsslseries","reuse");
x.t("vectorentry.index","vectorentry.action");
x.t("vectorentry.index","vectorentry.flags");
x.t("vectorentry.index","passing");
x.t("rssl_vtef_clear_entry","retval");
x.t("failure","summary");
x.t("----","complete");
x.t("additional","error");
x.t("value","text");
x.t("value","false");
x.t("value","determine");
x.t("value","string");
x.t("send","pageview");
x.t("already","populated");
x.t("specific","encode");
x.t("rsslbuffer","contains");
x.t("(arguments)","[r]");
x.t("condition","switch");
x.t("rsslencodevectorentry","&enciter");
x.t("view","11.3");
x.t("11.3","container");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("encountered","rsslencodevectorinit");
x.t("script","//www.google-analytics.com/analytics.js");
x.t("&rsslvector","rssl_ret_success");
x.t("11.3.4","----");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","init");
x.t("data","retval");
x.t("data","total");
x.t("data","entry");
x.t("data","approximate");
x.t("data","third");
x.t("data","first");
x.t("data","length");
x.t("data","information");
x.t("data","package");
x.t("data","approx");
x.t("data","series");
x.t("data","vectorentry.encdata.length");
x.t("information","store");
x.t("information","vectorentry.index");
x.t("rssl_ret_success","-----");
x.t("rssl_ret_success","error");
x.t("11.3.5","rsslvector");
x.t("rssl_vtf_has_total_count_hint","rssl_vtf_has_per_entry_perm_data");
x.t("nested","container");
x.t("rssl_vtef_update_entry","retval");
x.t("assuming","pencseries");
x.t("vectorentry.encdata.data","pencseries-");
x.t("values","example");
x.t("values","summary");
x.t("perm","data");
x.t("successful","create");
x.t("reuse","entry");
x.t("implicitly","rssl_vtf_has_per_entry_perm");
x.t("structure","prior");
x.t("print","message");
x.t("s\\n","rsslretcodetostring");
x.t("permission","data");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("done","rsslencodevectorinit");
x.t("edition","rsslvector");
x.t("call","rsslencodeseriesinit");
x.t("&enciter","&vectorentry");
x.t("&enciter","&rsslseries");
x.t("&enciter","&rsslvector");
x.t("&enciter","success");
x.t("enciterator","vector");
x.t("package","detailed");
x.t(".q=i","[r]");
x.t("following","sample");
x.t("vectorentry","rssl_init_vector_entry");
x.t("contained","series");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("containing","pre-encoded");
x.t("containing","encoded");
x.t("containing","rsslseries");
x.t("using","specific");
x.t("using","enciterator");
x.t("approx","encoded");
x.t("finalize","encoding");
x.t("rsslvector","containing");
x.t("rsslvector","encoding");
x.t("rsslvector","11.3.5.7");
x.t("a.async=1","a.src=g");
x.t("series","type");
x.t("series","entry");
x.t("series","second");
x.t("series","perm");
x.t("series","using");
x.t("series","entries");
x.t("vectorentry.encdata.length","pencseries-");
x.t("googleanalyticsobject","[r]");
x.t("performed","populate");
x.t("rssl_vtf_has_summary_data","rssl_vtf_has_total_count_hint");
x.t("rsslretcodetostring","(retval)");
x.t("success","parameter");
x.t("success","retval");
x.t("success","rssl_false");
x.t("success","complete");
x.t("success","false");
x.t("success","second");
x.t("success","first");
x.t("success","code");
x.t("success","failure");
x.t("success","value");
x.t("passing","permdata");
x.t("vectorentry.permdata.length","ppermdata-");
x.t("encode","entry");
x.t("encode","functions");
x.t("encode","function");
x.t("encode","expected");
x.t("encode","nested");
x.t("encode","contained");
x.t("encode","rsslvector");
x.t("buffer","version");
x.t("buffer","containing");
x.t("entries","example");
x.t("entries","refer");
x.t("11.3.5.7","rsslvector");
x.t("encoding","example");
x.t("encoding","summary");
x.t("encoding","retval");
x.t("encoding","vector");
x.t("encoding","functionality");
x.t("encoding","prior");
x.t("encoding","failed");
x.t("encoding","successful");
x.t("encoding","series");
x.t("encoding","success");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("contains","pre-encoded");
x.t("contains","permission");
}
