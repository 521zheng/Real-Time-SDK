function FileData_Pairs(x)
{
x.t("supports","full");
x.t("fluid","interface");
x.t("example","iterating");
x.t("interfaces","down-cast");
x.t("interfaces","return");
x.t("interfaces","ema");
x.t("genericmsg","postmsg");
x.t("provide","compile");
x.t("full","omm");
x.t("every","omm");
x.t("iteration","depending");
x.t("applied","received");
x.t("refer","section");
x.t("ommarray","treated");
x.t("ommarray","inherit");
x.t("ommarray","class");
x.t("omm","container");
x.t("omm","messages");
x.t("omm","data");
x.t("omm","containers");
x.t("variables","occur");
x.t("once","omm");
x.t("mechanism","example");
x.t("apply","filtering");
x.t("skips","entries");
x.t("action","applied");
x.t("action","permission");
x.t("container","type");
x.t("container","represents");
x.t("container","message");
x.t("container","entries");
x.t("ommerror","class");
x.t("uses","add");
x.t("uses","simple");
x.t("field","action");
x.t("field","field");
x.t("field","name");
x.t("modified","object");
x.t("interface","enables");
x.t("interface","return");
x.t("interface","usage");
x.t("primitives.ema","uses");
x.t("type","entry");
x.t("type","functionality");
x.t("type","iterating");
x.t("type","methods");
x.t("type","getload");
x.t("type","classes");
x.t("type","based");
x.t("type","ema");
x.t("populate","omm");
x.t("populate","entries");
x.t("complextype","class");
x.t("time","applications");
x.t("vector","classes");
x.t("ommopaque","map");
x.t("primitive","instead");
x.t("primitive","intrinsic");
x.t("objects","reference");
x.t("advanced","applications");
x.t("details","ease");
x.t("time-type","safety");
x.t("set-type","interfaces");
x.t("add","action");
x.t("add","type");
x.t("add","functionality");
x.t("during","iteration");
x.t("treated","primitive");
x.t("3.1","overview");
x.t("api","edition");
x.t("simple","iterative");
x.t("entry","may");
x.t("identity","e.g");
x.t("entry\u2019s","load");
x.t("inheritance","structure");
x.t("overview","elektron");
x.t("overview","ema");
x.t("inherit","complextype");
x.t("inherit","msg");
x.t("inherit","data");
x.t("primitives","ommerror");
x.t("primitives","functionality");
x.t("primitives","e.g");
x.t("desired","details");
x.t("3.3","provide");
x.t("functionality","populate");
x.t("functionality","read");
x.t("functionality","used");
x.t("name","interested");
x.t("operation","refer");
x.t("operation","desired");
x.t("iterate","every");
x.t("ease-of-use","interfaces");
x.t("references","contained");
x.t("enables","advanced");
x.t("iterating","fieldlist");
x.t("iterating","application");
x.t("base","data");
x.t("fieldlist","map");
x.t("fieldlist","application");
x.t("methods","return");
x.t("filtering","mechanism");
x.t("getload","interface");
x.t("provides","following");
x.t("map","refreshmsg");
x.t("map","series");
x.t("int","simplicity");
x.t("contain","identity");
x.t("down-cast","operation");
x.t("postmsg","chapter");
x.t("messages","primitives.ema");
x.t("messages","3.1");
x.t("messages","inherit");
x.t("messages","primitives");
x.t("approach","extract");
x.t("may","contain");
x.t("different","ways");
x.t("represents","primitives");
x.t("chapter","omm");
x.t("extracted","during");
x.t("ways","extracting");
x.t("instead","container");
x.t("section","3.3");
x.t("compile","time-type");
x.t("types","inherit");
x.t("reference","modified");
x.t("reference","type");
x.t("reference","base");
x.t("intrinsic","data");
x.t("return","references");
x.t("return","reference");
x.t("safety","set-type");
x.t("message","add");
x.t("message","api");
x.t("e.g","field");
x.t("e.g","add");
x.t("e.g","fieldlist");
x.t("e.g","ommint");
x.t("e.g","refreshmsg");
x.t("e.g","ommxml");
x.t("identification","individual");
x.t("simplicity","ema");
x.t("ommbuffer","ommrmtes");
x.t("msg","class");
x.t("load\u2019s","data");
x.t("ommint","ommbuffer");
x.t("usage","type");
x.t("refreshmsg","genericmsg");
x.t("refreshmsg","int");
x.t("depending","container");
x.t("ease","interfaces");
x.t("elektron","message");
x.t("read","extract");
x.t("extracting","entry\u2019s");
x.t("data","omm");
x.t("data","type");
x.t("data","entry\u2019s");
x.t("data","types");
x.t("data","e.g");
x.t("data","class");
x.t("information","associated");
x.t("inherits","complextype");
x.t("inherits","data");
x.t("interested","ema");
x.t("received","data");
x.t("application","apply");
x.t("application","specify");
x.t("ommrmtes","ommarray");
x.t("permission","information");
x.t("deeper","inheritance");
x.t("structure","classes");
x.t("containers","time");
x.t("containers","add");
x.t("containers","messages");
x.t("containers","except");
x.t("two","different");
x.t("classes","representing");
x.t("ommxml","ommopaque");
x.t("applications","iterate");
x.t("applications","down-cast");
x.t("based","load\u2019s");
x.t("edition","3.1");
x.t("used","populate");
x.t("used","specify");
x.t("individual","container");
x.t("contained","objects");
x.t("following","deeper");
x.t("except","ommarray");
x.t("turn","inherits");
x.t("class","ommarray");
x.t("class","omm");
x.t("class","ommerror");
x.t("class","getload");
x.t("class","e.g");
x.t("class","inherits");
x.t("class","turn");
x.t("series","vector");
x.t("occur","once");
x.t("without","matching");
x.t("associated","received");
x.t("load","ease-of-use");
x.t("load","data");
x.t("iterative","approach");
x.t("entries","omm");
x.t("entries","extracted");
x.t("entries","without");
x.t("representing","omm");
x.t("representing","primitive");
x.t("ema","supports");
x.t("ema","skips");
x.t("ema","uses");
x.t("ema","provides");
x.t("ema","two");
x.t("specify","variables");
x.t("specify","field");
x.t("object","fluid");
x.t("extract","data");
x.t("extract","entries");
x.t("matching","identification");
}
