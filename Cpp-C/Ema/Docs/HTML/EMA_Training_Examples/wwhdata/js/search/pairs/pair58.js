function FileData_Pairs(x)
{
x.t("supports","measurement");
x.t("posting","currently");
x.t("posting","supported");
x.t("posting","latency");
x.t("included","solution");
x.t("included","application");
x.t("example","emacppconsperf");
x.t("example","content");
x.t("placed","burst");
x.t("library","readme");
x.t("threadbinding.h","handles");
x.t("measure","performance");
x.t("measure","latency");
x.t("perftools/common","required");
x.t("perftools/common","msgdata.xml");
x.t("files","required");
x.t("files","document");
x.t("files","visual");
x.t("-------------------","command");
x.t("-------------------","emacppconsperf");
x.t("full","configurable");
x.t("consperfconfig.cpp","provides");
x.t("retrieving","time");
x.t("mutex","handling");
x.t("description","--------");
x.t("description","--------------------");
x.t("description","option");
x.t("create","connection");
x.t("currently","posting");
x.t("currently","physical");
x.t("studio","build");
x.t("build","----------------");
x.t("perfconfig.cpp","common");
x.t("omm","provider");
x.t("source","files");
x.t("source","details");
x.t("source","-----------------");
x.t("source","xml");
x.t("required","posting");
x.t("required","rdmfielddictionary");
x.t("consumerthread.cpp","handles");
x.t("summary","--------");
x.t("creates","two");
x.t("uses","libxml2");
x.t("enumtype.def","located");
x.t("line","options");
x.t("line","usage");
x.t("program","-----------------");
x.t("apputil.cpp","utility");
x.t("collects","records");
x.t("physical","application");
x.t("provided","libxml2");
x.t("configurable","parameters");
x.t("configurable","options");
x.t("displays","command");
x.t("open","included");
x.t("open","source");
x.t("time","total");
x.t("time","cpu");
x.t("time","information");
x.t("time","using");
x.t("connection","provider");
x.t("total","time");
x.t("total","system");
x.t("total","across");
x.t("multiple","threads");
x.t("statistics.cpp","provides");
x.t("parsing","item");
x.t("default","parameters");
x.t("updates","provider");
x.t("details","-----------------");
x.t("compiling","source");
x.t("price","content");
x.t("command","line");
x.t("document","--------------------");
x.t("perftool","applications");
x.t("cpu","time");
x.t("cpu","divided");
x.t("cpu","usage");
x.t("file","emacppconsperf");
x.t("file","(350k.xml)");
x.t("enterprise","platform");
x.t("emacppconsperf","displays");
x.t("emacppconsperf","emacppconsperf");
x.t("emacppconsperf","------------------");
x.t("emacppconsperf","elektron");
x.t("emacppconsperf","runs");
x.t("emacppconsperf","application");
x.t("api","edition");
x.t("end-to-end","latency");
x.t("pressing","ctrl");
x.t("buttons","terminates");
x.t("(350k.xml)","ema");
x.t("directly","omm");
x.t("mutex.cpp","provides");
x.t("name","-----------------");
x.t("common","configurable");
x.t("common","classes");
x.t("performance","tools");
x.t("performance","ema");
x.t("readme","provided");
x.t("-used","parsing");
x.t("-used","printout");
x.t("xmlitemparser.cpp","-used");
x.t("provider","request");
x.t("provider","thomson");
x.t("provider","consumer");
x.t("handles","thread");
x.t("handles","consumer");
x.t("--------","summary");
x.t("--------","purpose");
x.t("parameters","full");
x.t("parameters","printed");
x.t("provides","mutex");
x.t("provides","configurable");
x.t("provides","methods");
x.t("provides","functions");
x.t("provides","contol-c");
x.t("methods","collecting");
x.t("statistical","information");
x.t("determine","end-to-end");
x.t("records","statistical");
x.t("thread","collects");
x.t("thread","affinity");
x.t("thread","binding");
x.t("--------------------","detailed");
x.t("--------------------","emacppconsperf.cpp");
x.t("request","market");
x.t("divided","total");
x.t("-----------------","compiling");
x.t("-----------------","emacppconsperf");
x.t("-----------------","application");
x.t("-----------------","development");
x.t("solution","files");
x.t("functions","retrieving");
x.t("reuters","enterprise");
x.t("------------------","setup");
x.t("------------------","following");
x.t("supported","-------------------");
x.t("busy","application");
x.t("calculating","statistical");
x.t("options","brief");
x.t("options","application");
x.t("options","across");
x.t("number","greater");
x.t("setup","environment");
x.t("decodes","timestamp");
x.t("determination","thread");
x.t("consperf","supports");
x.t("detailed","description");
x.t("types","threads");
x.t("xml","parser");
x.t("rdmfielddictionary","enumtype.def");
x.t("directory","350k.xml");
x.t("handling","threadaffinity.cpp");
x.t("handling","gettime.cpp");
x.t("purpose","application");
x.t("level","market");
x.t("thomson","reuters");
x.t("consumer","creates");
x.t("consumer","decodes");
x.t("consumer","connections");
x.t("consumer","threads");
x.t("located","perftools/common");
x.t("located","directory");
x.t("message","api");
x.t("memory","currently");
x.t("memory","cpu");
x.t("memory","usage");
x.t("100","multiple");
x.t("environment","------------------");
x.t("option","pressing");
x.t("randomly","placed");
x.t("resident","memory");
x.t("greater","100");
x.t("printed","screen");
x.t("and/or","common");
x.t("contol-c","handling");
x.t("threadaffinity.cpp","-used");
x.t("market","price");
x.t("market","data");
x.t("latency","consperf");
x.t("latency","application");
x.t("latency","timestamp");
x.t("configuration","files");
x.t("brief","description");
x.t("visual","studio");
x.t("main","file");
x.t("main","thread");
x.t("usage","-------------------");
x.t("usage","total");
x.t("usage","memory");
x.t("usage","measured");
x.t("measurements","statistics.cpp");
x.t("tools","example");
x.t("measured","resident");
x.t("affinity","binding");
x.t("connections","consuming");
x.t("elektron","message");
x.t("runs","default");
x.t("screen","emacppconsperf");
x.t("terminates","program");
x.t("----------------","example");
x.t("----------------","included");
x.t("platform","consumer");
x.t("parser","library");
x.t("ctrl","buttons");
x.t("information","perfconfig.cpp");
x.t("information","consumer");
x.t("information","measurements");
x.t("data","measure");
x.t("measurement","posting");
x.t("tool","open");
x.t("emacppconsperf.cpp","main");
x.t("application","measure");
x.t("application","consperfconfig.cpp");
x.t("application","description");
x.t("application","source");
x.t("application","consumerthread.cpp");
x.t("application","uses");
x.t("application","cpu");
x.t("application","name");
x.t("application","measures");
x.t("utility","applications");
x.t("collecting","calculating");
x.t("printout","determination");
x.t("two","types");
x.t("libxml2","source");
x.t("libxml2","open");
x.t("classes","ctrlbreakhandler.cpp");
x.t("applications","mutex.cpp");
x.t("applications","and/or");
x.t("edition","emacppconsperf");
x.t("timestamp","randomly");
x.t("timestamp","update");
x.t("burst","updates");
x.t("msgdata.xml","located");
x.t("gettime.cpp","provides");
x.t("system","time");
x.t("following","configuration");
x.t("using","cpu");
x.t("350k.xml","located");
x.t("across","perftool");
x.t("across","threads");
x.t("development","tool");
x.t("measures","memory");
x.t("ctrlbreakhandler.cpp","provides");
x.t("ema","performance");
x.t("ema","consuming");
x.t("consuming","level");
x.t("consuming","content");
x.t("content","apputil.cpp");
x.t("content","directly");
x.t("content","----------------");
x.t("threads","create");
x.t("threads","busy");
x.t("threads","number");
x.t("threads","main");
x.t("update","determine");
x.t("binding","threadbinding.h");
x.t("binding","xmlitemparser.cpp");
x.t("item","file");
}
