function FileData_Pairs(x)
{
x.t("version","changes");
x.t("version","information");
x.t("dictionary_normal=0x7","provides");
x.t("description","value");
x.t("refer","section");
x.t("table","dictionary");
x.t("required","populate");
x.t("required","interestafterrefresh");
x.t("required","initialimage");
x.t("required","receiving");
x.t("required","serviceid");
x.t("required","represents");
x.t("required","mmt_dictionary");
x.t("required","service");
x.t("source","directory");
x.t("ommconsumerconfig.addadminmsg","override");
x.t("dictionary_verbose=0xf","provides");
x.t("5.4.1","name");
x.t("dictionary_minimal=0x3","provides");
x.t("populate","name");
x.t("interestafterrefresh","true");
x.t("response","refer");
x.t("response","message");
x.t("whenever","dictionary");
x.t("filterentry","note");
x.t("ommconsumer","constructor");
x.t("needed","dictionary_info=0x0");
x.t("needed","decoding");
x.t("needed","users");
x.t("needed","caching");
x.t("default","dictionary");
x.t("listed","dictionary\u2019s");
x.t("updates","sent");
x.t("details","refer");
x.t("element","seviceinfo");
x.t("indicates","name");
x.t("indicates","initial");
x.t("indicates","streaming");
x.t("refreshcomplete","consumer");
x.t("status","response");
x.t("recommends","consumer");
x.t("initialimage","true");
x.t("api","edition");
x.t("filter","required");
x.t("filter","according");
x.t("according","information");
x.t("desired","dictionary");
x.t("desired","verbosity");
x.t("true","indicates");
x.t("true","notified");
x.t("name","required");
x.t("name","desired");
x.t("name","name");
x.t("name","dictionariesprovided");
x.t("name","service");
x.t("dictionary","version");
x.t("dictionary","needed");
x.t("dictionary","request");
x.t("dictionary","domain");
x.t("dictionary","consumer");
x.t("dictionary","seen");
x.t("dictionary","information");
x.t("dictionary","streams");
x.t("constructor","class");
x.t("component","description");
x.t("provides","information");
x.t("encoded","using");
x.t("receiving","refreshcomplete");
x.t("request","required");
x.t("request","updates");
x.t("request","indicates");
x.t("request","supported");
x.t("request","messages");
x.t("request","message");
x.t("request","setting");
x.t("reuters","recommends");
x.t("pause","request");
x.t("supported","priority");
x.t("dictionary_info=0x0","version");
x.t("messages","using");
x.t("domain","usage");
x.t("decoding","optional");
x.t("comments","details");
x.t("serviceid","required");
x.t("serviceid","service");
x.t("receive","status");
x.t("represents","desired");
x.t("chapter","dictionary");
x.t("changes","component");
x.t("section","5.4.1");
x.t("section","4.3.1.1");
x.t("directory","response");
x.t("notified","whenever");
x.t("initial","image");
x.t("reqmsg","sent");
x.t("interactions","required");
x.t("verbosity","dictionary");
x.t("override","default");
x.t("thomson","reuters");
x.t("consumer","filter");
x.t("consumer","receive");
x.t("consumer","streaming");
x.t("message","api");
x.t("message","dictionary");
x.t("message","encoded");
x.t("message","chapter");
x.t("message","elektron");
x.t("message","received");
x.t("message","update");
x.t("domaintype","required");
x.t("seen","source");
x.t("dictionariesprovided","element");
x.t("5.3.1","dictionary");
x.t("value","domaintype");
x.t("usage","dictionary");
x.t("mmt_dictionary","interactions");
x.t("elektron","message");
x.t("internally","ommconsumer");
x.t("information","dictionary_normal=0x7");
x.t("information","needed");
x.t("information","dictionary");
x.t("information","including");
x.t("configure","dictionary");
x.t("optional","dictionary_minimal=0x3");
x.t("optional","filter");
x.t("image","required");
x.t("received","pause");
x.t("4.3.1.1","servicename");
x.t("application","either");
x.t("users","configure");
x.t("priority","optional");
x.t("dictionary\u2019s","name");
x.t("note","application");
x.t("seviceinfo","filterentry");
x.t("edition","5.3.1");
x.t("caching","dictionary_verbose=0xf");
x.t("service","table");
x.t("service","listed");
x.t("service","name");
x.t("service","serviceid");
x.t("either","servicename");
x.t("using","ommconsumerconfig.addadminmsg");
x.t("using","reqmsg");
x.t("class","request");
x.t("streaming","request");
x.t("setting","interestafterrefresh");
x.t("including","comments");
x.t("sent","dictionary");
x.t("sent","internally");
x.t("servicename","required");
x.t("servicename","serviceid");
x.t("streams","thomson");
x.t("update","response");
}
