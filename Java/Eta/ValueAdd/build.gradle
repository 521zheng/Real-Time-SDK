apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta.valueadd"
archivesBaseName = "etaValueAdd"
version "$SpecificationVersion"

publishing {
    publications{
        mavenJava(MavenPublication){

            groupId = group
            artifactId = archivesBaseName
            version = "$SpecificationVersion"
            from components.java

            pom {
                name = "$archivesBaseName"
                packaging = 'jar'
                url = 'https://github.com/Refinitiv/Real-Time-SDK'
                description = 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'

                scm {
                    connection = 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection = 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url = 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization = 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "repository"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
        maven {
            name = "snapshotRepository"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

cobertura {
     coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Eta-ValueAdd'
    }
}

dependencies {
    implementation group: 'org.json', name: 'json', version: '20210307'
    implementation group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.13'
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.32'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
	
	// Since eclipse does not distinguish between the testCompile and compile 
	// we need to have this check for publishing to maven central to list the mockito
	// as only the compile test depenency. When publishing to maven central the task
	// needs to be executed with the -Pmavencentral
	if (project.hasProperty("mavencentral"))
	{
        testImplementation('org.mockito:mockito-all:1.9.0'){
            exclude group: 'org.hamcrest'
        }
	}
	else
	{
        implementation('org.mockito:mockito-all:1.9.0'){
            exclude group: 'org.hamcrest'
        }
	}

    implementation project(':Eta:Core')
    implementation project(':Eta:Converter')

    testImplementation project(':Eta:Core').sourceSets.test.output

	// for unit test use the classes instead of the jar file, since the jar is sealed
    testRuntimeOnly project(':Eta:Core').sourceSets.main.output

	// needed for cobertura
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'

}

ext.sharedManifest = manifest {
        attributes( 'Sealed': 'true',
                'Build-Date': BuildDate,
                'Specification-Version': SpecificationVersion,
                'Specification-Vendor': vendor,
                'Implementation-Title': group,
                'Implementation-Version': etaImplementationVersion,
                'Implementation-Vendor': vendor )
}

jar {

	doFirst { println 'Creating ValueAdd jar file' }

	manifest { 
		attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'
		from sharedManifest 
	}

    destinationDirectory.set(file("../Libs/"))
    archiveBaseName.convention('etaValueAdd');
    archiveBaseName.set('etaValueAdd');
}

javadoc {
        doFirst {
                println "Generating javadoc for ValueAdd"
        }

        exclude '**/*Impl.java'
        exclude '**/JUnit*.java'

        destinationDir = file('../Docs/refman/etajvalueadd/')
        title = "ETA ValueAdd JAVA " +  "${SpecificationVersion}"

        options.footer ("${javadoc_footer}")
        options.header ("${javadoc_header}")
        options.bottom ("${javadoc_bottom}")

        options.setWindowTitle ('ETA ValueAdd')
}

task cleanJar (type: Delete) {
        delete "${jar.archiveFile}"
}
clean.dependsOn cleanJar

task javadocJar (type: Jar) {
        archiveClassifier.convention('javadoc');
        archiveClassifier.set('javadoc');
        from javadoc.destinationDir
        destinationDirectory.set(jar.destinationDirectory)

        manifest {
		attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition ValueAdd Classes'
                from sharedManifest
        }
}

task sourcesJar(type: Jar) {
        archiveClassifier.convention('sources');
        archiveClassifier.set('sources');
        from sourceSets.main.allSource
}

artifacts {
        archives javadocJar, sourcesJar
}

test {
        // set to true to see the junit stdoutput
        testLogging.showStandardStreams = false
        maxParallelForks = 1
//        maxParallelForks = Runtime.runtime.availableProcessors()
}

repositories {
    mavenCentral()
}

