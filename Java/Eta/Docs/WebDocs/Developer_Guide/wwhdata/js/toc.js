function  WWHBookData_AddTOCEntries(P)
{
var A=P.fN("Chapter 1 Transport API Developers Guide Introduction","0");
var B=A.fN("1.1 About this Manual","1");
B=A.fN("1.2 Audience","2");
B=A.fN("1.3 Programming Language","3");
B=A.fN("1.4 Acronyms and Abbreviations","4");
B=A.fN("1.5 References","5");
B=A.fN("1.6 Documentation Feedback","6");
B=A.fN("1.7 Document Conventions","7");
var C=B.fN("1.7.1 Typographic","8");
C=B.fN("1.7.2 Diagrams","9");
B=A.fN("1.8 What\u2019s New","10");
A=P.fN("Chapter 2 Product Description","11");
B=A.fN("2.1 What is the Transport API?","12");
B=A.fN("2.2 Transport API Features","13");
C=B.fN("2.2.1 General Capabilities","14");
C=B.fN("2.2.2 Consumer Applications","15");
C=B.fN("2.2.3 Provider Applications: Interactive","16");
C=B.fN("2.2.4 Provider Applications: Non-Interactive","17");
B=A.fN("2.3 Performance and Feature Comparison","18");
C=B.fN("2.3.1 Java Garbage","19");
C=B.fN("2.3.2 Use of Assertions","20");
B=A.fN("2.4 Functionality: Which API to Choose?","21");
A=P.fN("Chapter 3 Consumers and Providers","22");
B=A.fN("3.1 Overview","23");
B=A.fN("3.2 Consumers","24");
C=B.fN("3.2.1 Subscriptions: Request/Response","25");
C=B.fN("3.2.2 Batches","26");
C=B.fN("3.2.3 Views","27");
C=B.fN("3.2.4 Pause and Resume","28");
var D=C.fN("3.2.4.1 Pause / Resume Use Case 1: Back-end Processing","29");
D=C.fN("3.2.4.2 Pause / Resume Use Case 2: Display Applications","30");
C=B.fN("3.2.5 Symbol Lists","31");
D=C.fN("3.2.5.1 Requesting Symbol List Data Streams","32");
D=C.fN("3.2.5.2 Server Symbol Lists","33");
C=B.fN("3.2.6 Posting","34");
D=C.fN("3.2.6.1 Local Publication","35");
D=C.fN("3.2.6.2 Contribution/Inserts","36");
C=B.fN("3.2.7 Generic Message","37");
C=B.fN("3.2.8 Private Streams","38");
B=A.fN("3.3 Providers","39");
C=B.fN("3.3.1 Interactive Providers","40");
D=C.fN("3.3.1.1 Request /Response","41");
D=C.fN("3.3.1.2 Posts","42");
D=C.fN("3.3.1.3 Generic Messages","43");
D=C.fN("3.3.1.4 Private Streams","44");
D=C.fN("3.3.1.5 Tunnel Streams (Available Only in ETA Reactor and EMA)","45");
C=B.fN("3.3.2 Non-Interactive Providers","46");
A=P.fN("Chapter 4 System View","47");
B=A.fN("4.1 System Architecture Overview","48");
B=A.fN("4.2 Advanced Distribution Server (ADS)","49");
B=A.fN("4.3 Advanced Data Hub (ADH)","50");
B=A.fN("4.4 Elektron","51");
B=A.fN("4.5 Data Feed Direct","52");
B=A.fN("4.6 Internet Connctivity via HTTP and HTTPS","53");
B=A.fN("4.7 Direct Connect","54");
A=P.fN("Chapter 5 Model and Package Overviews","55");
B=A.fN("5.1 Transport API Models","56");
C=B.fN("5.1.1 Open Message Model (OMM)","56#999038");
C=B.fN("5.1.2 Reuters Wire Format (RWF)","57");
C=B.fN("5.1.3 Domain Message Model","58");
D=C.fN("5.1.3.1 Reuters Domain Model","59");
D=C.fN("5.1.3.2 User-Defined Domain Model","60");
B=A.fN("5.2 Packages","61");
C=B.fN("5.2.1 Transport Package","62");
C=B.fN("5.2.2 Codec Package","63");
A=P.fN("Chapter 6 Building an OMM Consumer","64");
B=A.fN("6.1 Overview","65");
B=A.fN("6.2 Establish Network Communication","66");
B=A.fN("6.3 Perform Login Process","67");
B=A.fN("6.4 Obtain Source Directory Information","68");
B=A.fN("6.5 Load or Download Necessary Dictionary Information","69");
B=A.fN("6.6 Issue Requests and/or Post Information","70");
B=A.fN("6.7 Log Out and Shut Down","71");
B=A.fN("6.8 Additional Consumer Details","72");
A=P.fN("Chapter 7 Building an OMM Interactive Provider","73");
B=A.fN("7.1 Overview","74");
B=A.fN("7.2 Establish Network Communication","75");
B=A.fN("7.3 Perform Login Process","76");
B=A.fN("7.4 Provide Source Directory Information","77");
B=A.fN("7.5 Provide or Download Necessary Dictionaries","78");
B=A.fN("7.6 Handle Requests and Post Messages","79");
B=A.fN("7.7 Disconnect Consumers and Shut Down","80");
B=A.fN("7.8 Additional Interactive Provider Details","81");
A=P.fN("Chapter 8 Building an OMM NIP","82");
B=A.fN("8.1 Overview","83");
B=A.fN("8.2 Establish Network Communication","84");
B=A.fN("8.3 Perform Login Process","85");
B=A.fN("8.4 Perform Dictionary Download","86");
B=A.fN("8.5 Provide Source Directory Information","87");
B=A.fN("8.6 Provide Content","88");
B=A.fN("8.7 Log Out and Shut Down","89");
B=A.fN("8.8 Additional NIP Details","90");
A=P.fN("Chapter 9 Transport Package Detailed View","91");
B=A.fN("9.1 Concepts","92");
C=B.fN("9.1.1 Transport Types","93");
D=C.fN("9.1.1.1 Socket Transport","94");
D=C.fN("9.1.1.2 Reliable Multicast Transport","95");
D=C.fN("9.1.1.3 Sequenced Multicast Transport","96");
C=B.fN("9.1.2 Channel Object","97");
D=C.fN("9.1.2.1 Channel State Values","98");
D=C.fN("9.1.2.2 ConnectionTypes Values","99");
C=B.fN("9.1.3 Server Object","100");
C=B.fN("9.1.4 Transport Error Handling","101");
C=B.fN("9.1.5 General Transport Return Codes","102");
C=B.fN("9.1.6 Application Lifecycle","103");
B=A.fN("9.2 Initializing and Uninitializing the Transport","104");
C=B.fN("9.2.1 Initialization and Uninitialization Method","105");
C=B.fN("9.2.2 Initialization Reference Counting with Example","106");
C=B.fN("9.2.3 Transport Locking Models","107");
B=A.fN("9.3 Creating the Connection","108");
C=B.fN("9.3.1 Network Topologies","109");
D=C.fN("9.3.1.1 TCP-based Networks","110");
D=C.fN("9.3.1.2 Multicast-based Networks: Unified","111");
D=C.fN("9.3.1.3 Multicast-based Networks: Segmented","112");
C=B.fN("9.3.2 Creating the Outbound Connection: Transport.connect Method","113");
D=C.fN("9.3.2.1 ConnectOptions Methods","114");
D=C.fN("9.3.2.2 UnifiedNetworkInfo Method Options","115");
D=C.fN("9.3.2.3 SegmentedNetworkInfo Method Options","116");
D=C.fN("9.3.2.4 TcpOpts Method Option","117");
D=C.fN("9.3.2.5 MCastOpts Method Options","118");
D=C.fN("9.3.2.6 ShmemOpts Method","119");
D=C.fN("9.3.2.7 SeqMCastOpts Method","120");
C=B.fN("9.3.3 Transport.connect Outbound Connection Creation Example","121");
C=B.fN("9.3.4 Tunneling Connection Keep Alive","122");
B=A.fN("9.4 Server Creation and Accepting Connections","123");
C=B.fN("9.4.1 Creating a Listening Socket","123#1006013");
D=C.fN("9.4.1.1 BindOptions Methods","124");
D=C.fN("9.4.1.2 Transport.bind Listening Socket Connection Creation Example","125");
C=B.fN("9.4.2 Accepting Connection Requests","126");
D=C.fN("9.4.2.1 AcceptOptions Methods","127");
D=C.fN("9.4.2.2 Server.accept Accepting Connection Example","128");
C=B.fN("9.4.3 Compression Support","129");
B=A.fN("9.5 Channel Initialization","130");
C=B.fN("9.5.1 Channel.init Method","131");
C=B.fN("9.5.2 InProgInfo Object","132");
C=B.fN("9.5.3 Calling Channel.init","133");
C=B.fN("9.5.4 Channel.init Return Codes","134");
C=B.fN("9.5.5 Channel.init Example","135");
B=A.fN("9.6 Reading Data","136");
C=B.fN("9.6.1 Channel.read Method","137");
C=B.fN("9.6.2 ReadFlags Values","138");
C=B.fN("9.6.3 Channel.read Return Codes","139");
C=B.fN("9.6.4 Channel.read Example","140");
B=A.fN("9.7 Writing Data: Overview","141");
B=A.fN("9.8 Writing Data: Obtaining a Buffer","142");
C=B.fN("9.8.1 Transport Buffer Management Channel Methods","143");
C=B.fN("9.8.2 Transport Buffer Management Server Method","144");
C=B.fN("9.8.3 Channel.getBuffer Return Values","145");
B=A.fN("9.9 Writing Data to a Buffer","146");
C=B.fN("9.9.1 Channel.write Method","147");
C=B.fN("9.9.2 WriteFlags Values","148");
C=B.fN("9.9.3 Compression","149");
C=B.fN("9.9.4 Fragmentation","150");
C=B.fN("9.9.5 Channel.write Return Codes","151");
C=B.fN("9.9.6 Channel.getBuffer and Channel.write Example","152");
B=A.fN("9.10 Managing Outbound Queues","153");
C=B.fN("9.10.1 Ordering Queued Data: WritePriorities","154");
D=C.fN("9.10.1.1 Priority Ordering","155");
D=C.fN("9.10.1.2 WritePriorities Values","156");
C=B.fN("9.10.2 Channel.flush Method","157");
C=B.fN("9.10.3 Channel.flush Return Codes","158");
C=B.fN("9.10.4 Channel.flush Example","159");
B=A.fN("9.11 Packing Additional Data into a Buffer","160");
C=B.fN("9.11.1 Channel.packBuffer Return Values","161");
C=B.fN("9.11.2 Example: Channel.getBuffer, Channel.packBuffer, and Channel.write","162");
B=A.fN("9.12 Ping Management","163");
C=B.fN("9.12.1 Ping Timeout","164");
C=B.fN("9.12.2 Channel.ping Function","165");
C=B.fN("9.12.3 Channel.ping Return Values","166");
C=B.fN("9.12.4 Channel.ping Example","167");
B=A.fN("9.13 Closing Connections","168");
C=B.fN("9.13.1 Functions for Closing Connections","168#1037673");
C=B.fN("9.13.2 Close Connections Example","169");
B=A.fN("9.14 Utility Methods","170");
C=B.fN("9.14.1 General Transport Utility Methods","171");
C=B.fN("9.14.2 ChannelInfo Methods","172");
C=B.fN("9.14.3 multicastStats Methods","173");
C=B.fN("9.14.4 componentInfo Method","174");
C=B.fN("9.14.5 ServerInfo Methods","175");
C=B.fN("9.14.6 Channel.ioctl IoctlCodes","176");
C=B.fN("9.14.7 Server.ioctl IoctlCodes","177");
B=A.fN("9.15 Tunneling","178");
C=B.fN("9.15.1 Configuration","179");
D=C.fN("9.15.1.1 TunnelingInfo Methods","180");
D=C.fN("9.15.1.2 Configuration Example","181");
C=B.fN("9.15.2 Proxy Authentication","182");
D=C.fN("9.15.2.1 The Proxy Authentication Process","183");
D=C.fN("9.15.2.2 Supplying the Transport API with Credentials for Proxy Authentication","184");
D=C.fN("9.15.2.3 CredentialsInfo Methods","185");
D=C.fN("9.15.2.4 Providing Credentials and Modifying the Consumer Example","186");
D=C.fN("9.15.2.5 Proxy Authentication using NTLM","187");
D=C.fN("9.15.2.6 Proxy Authentication using Negotiate/Kerberos","188");
A=P.fN("Chapter 10 Encoding and Decoding Conventions","189");
B=A.fN("10.1 Concepts","190");
C=B.fN("10.1.1 Data Types","191");
C=B.fN("10.1.2 Composite Pattern and Nesting","192");
B=A.fN("10.2 Encoding Semantics","193");
C=B.fN("10.2.1 Init and Complete Suffixes","194");
C=B.fN("10.2.2 The Encode Iterator: EncodeIterator","195");
D=C.fN("10.2.2.1 EncodeIterator Functions","196");
D=C.fN("10.2.2.2 EncodeIterator: Basic Use Example","197");
C=B.fN("10.2.3 Content Roll Back with Example","198");
B=A.fN("10.3 Decoding Semantics","199");
C=B.fN("10.3.1 The Decode Iterator: DecodeIterator","200");
C=B.fN("10.3.2 Functions for Use with DecodeIterator","201");
C=B.fN("10.3.3 DecodeIterator: Basic Use Example","202");
B=A.fN("10.4 Return Code Values","203");
C=B.fN("10.4.1 CodecReturnCodes Methods","204");
B=A.fN("10.5 Versioning","205");
C=B.fN("10.5.1 Protocol Versioning","206");
C=B.fN("10.5.2 Library Versioning","207");
A=P.fN("Chapter 11 Data Package Detailed View","208");
B=A.fN("11.1 Concepts","209");
B=A.fN("11.2 Primitive Types","210");
C=B.fN("11.2.1 Real","211");
D=C.fN("11.2.1.1 Methods","212");
D=C.fN("11.2.1.2 hint Values","213");
D=C.fN("11.2.1.3 Hint Use Case: Converting an Real to a Float or a Double","214");
D=C.fN("11.2.1.4 Hint Use Case: Converting Double or Float to an Real","215");
C=B.fN("11.2.2 Date","216");
C=B.fN("11.2.3 Time","217");
C=B.fN("11.2.4 DateTime","218");
C=B.fN("11.2.5 Qos","219");
D=C.fN("11.2.5.1 Methods","220");
D=C.fN("11.2.5.2 Qos Timeliness Values","221");
D=C.fN("11.2.5.3 QosRates Values","222");
C=B.fN("11.2.6 State","223");
D=C.fN("11.2.6.1 Methods","224");
D=C.fN("11.2.6.2 StreamStates Values","225");
D=C.fN("11.2.6.3 StreamStates Methods","226");
D=C.fN("11.2.6.4 DataStates Values","227");
D=C.fN("11.2.6.5 DataStates Methods","228");
D=C.fN("11.2.6.6 StateCodes Values","229");
D=C.fN("11.2.6.7 StateCodes Methods","230");
C=B.fN("11.2.7 Array","231");
D=C.fN("11.2.7.1 Array Methods","232");
D=C.fN("11.2.7.2 ArrayEntry Methods","233");
D=C.fN("11.2.7.3 Encoding: Example 1","234");
D=C.fN("11.2.7.4 Encoding: Example 2","235");
D=C.fN("11.2.7.5 Decoding: Example","236");
C=B.fN("11.2.8 Buffer","237");
D=C.fN("11.2.8.1 Methods","238");
D=C.fN("11.2.8.2 Example","239");
C=B.fN("11.2.9 RMTES Decoding","240");
D=C.fN("11.2.9.1 RmtesCacheBuffer: Structure","241");
D=C.fN("11.2.9.2 RmtesBuffer: Structure Members","242");
D=C.fN("11.2.9.3 RmtesDecoder","243");
D=C.fN("11.2.9.4 Example: Converting RMTES to UCS-2","244");
B=A.fN("11.3 Container Types","245");
C=B.fN("11.3.1 FieldList","246");
D=C.fN("11.3.1.1 Structure Members","247");
D=C.fN("11.3.1.2 FieldListFlag Values","248");
D=C.fN("11.3.1.3 FieldEntry Methods","249");
D=C.fN("11.3.1.4 Rippling","250");
D=C.fN("11.3.1.5 Encoding Example","251");
D=C.fN("11.3.1.6 Decoding Example","252");
C=B.fN("11.3.2 ElementList","253");
D=C.fN("11.3.2.1 Structure Members","254");
D=C.fN("11.3.2.2 ElementListFlags Values","255");
D=C.fN("11.3.2.3 ElementEntry Methods","256");
D=C.fN("11.3.2.4 ElementList Encoding Example","257");
D=C.fN("11.3.2.5 ElementList Decoding Examples","258");
C=B.fN("11.3.3 Map","259");
D=C.fN("11.3.3.1 Map Methods","260");
D=C.fN("11.3.3.2 MapFlags Values","261");
D=C.fN("11.3.3.3 MapEntry Methods","262");
D=C.fN("11.3.3.4 MapEntry Flag Enumeration Value","263");
D=C.fN("11.3.3.5 MapEntry Action Enumeration Values","264");
D=C.fN("11.3.3.6 MapEntry Encoding Example","265");
D=C.fN("11.3.3.7 MapEntry Decoding Example","266");
C=B.fN("11.3.4 Series","267");
D=C.fN("11.3.4.1 Series Methods","268");
D=C.fN("11.3.4.2 SeriesFlags Values","269");
D=C.fN("11.3.4.3 SeriesEntry Methods","270");
D=C.fN("11.3.4.4 Series Encoding Example","271");
D=C.fN("11.3.4.5 Series Decoding Example","272");
C=B.fN("11.3.5 Vector","273");
D=C.fN("11.3.5.1 Vector Structure Members","274");
D=C.fN("11.3.5.2 Vector Flag Enumeration Values","275");
D=C.fN("11.3.5.3 VectorEntry Structure Members","276");
D=C.fN("11.3.5.4 VectorEntry Flag Enumeration Value","277");
D=C.fN("11.3.5.5 VectorEntryActions Values","278");
D=C.fN("11.3.5.6 Vector Encoding Example","279");
D=C.fN("11.3.5.7 Vector Decoding Example","280");
C=B.fN("11.3.6 FilterList","281");
D=C.fN("11.3.6.1 FilterList Methods","282");
D=C.fN("11.3.6.2 FilterList Flag Enumeration Values","283");
D=C.fN("11.3.6.3 FilterEntry Methods","284");
D=C.fN("11.3.6.4 FilterEntry Flag Enumeration Values","285");
D=C.fN("11.3.6.5 FilterEntryActions Values","286");
D=C.fN("11.3.6.6 FilterEntry Encoding Example","287");
D=C.fN("11.3.6.7 FilterEntry Decoding Example","288");
C=B.fN("11.3.7 Non-RWF Container Types","289");
D=C.fN("11.3.7.1 Non-RWF Encode Functions","290");
D=C.fN("11.3.7.2 Non-RWF Encoding Example","291");
D=C.fN("11.3.7.3 Decoding Non-RWF Types","292");
B=A.fN("11.4 Permission Data","293");
B=A.fN("11.5 Summary Data","294");
B=A.fN("11.6 Set Definitions and Set-Defined Data","295");
C=B.fN("11.6.1 Set-Defined Primitive Types","296");
C=B.fN("11.6.2 Set Definition Use","297");
D=C.fN("11.6.2.1 FieldSetDef Methods","298");
D=C.fN("11.6.2.2 FieldSetDefEntry Structure Members","299");
D=C.fN("11.6.2.3 ElementSetDef Methods","300");
D=C.fN("11.6.2.4 ElementSetDefEntry Methods","301");
C=B.fN("11.6.3 Set Definition Database","302");
D=C.fN("11.6.3.1 LocalFieldSetDefDb Methods","303");
D=C.fN("11.6.3.2 LocalElementSetDefDb Methods","304");
D=C.fN("11.6.3.3 Local Set Definition Database Encoding Interfaces","305");
D=C.fN("11.6.3.4 Local Set Definition Database Decoding Interfaces","306");
D=C.fN("11.6.3.5 Field Set Definition Database Encoding Example","307");
D=C.fN("11.6.3.6 Field Set Definition Database Decoding Example","308");
D=C.fN("11.6.3.7 Element Set Definition Database Encoding Example","309");
D=C.fN("11.6.3.8 Element Set Definition Database Decoding Example","310");
A=P.fN("Chapter 12 Message Package Detailed View","311");
B=A.fN("12.1 Concepts","312");
C=B.fN("12.1.1 Common Message Interface","313");
D=C.fN("12.1.1.1 Msg Methods","314");
D=C.fN("12.1.1.2 MsgClasses Values","315");
D=C.fN("12.1.1.3 MsgClasses Methods","316");
C=B.fN("12.1.2 Message Key","317");
D=C.fN("12.1.2.1 MsgKey Methods","318");
D=C.fN("12.1.2.2 Message Key Flag Enumeration Values","319");
C=B.fN("12.1.3 Stream Identification","320");
D=C.fN("12.1.3.1 Stream Comparison","321");
D=C.fN("12.1.3.2 Private Streams","322");
D=C.fN("12.1.3.3 Changeable Stream Attributes","323");
B=A.fN("12.2 Messages","324");
C=B.fN("12.2.1 Request Message Interface","324#1001278");
D=C.fN("12.2.1.1 RequestMsg Methods","325");
D=C.fN("12.2.1.2 RequestMsgFlags Values","326");
C=B.fN("12.2.2 Refresh Message Interface","327");
D=C.fN("12.2.2.1 RefreshMsg Methods","328");
D=C.fN("12.2.2.2 RefreshMsgFlags Values","329");
C=B.fN("12.2.3 Update Message Interface","330");
D=C.fN("12.2.3.1 UpdateMsg Methods","331");
D=C.fN("12.2.3.2 UpdateMsgFlags Values","332");
C=B.fN("12.2.4 Status Message Interface","333");
D=C.fN("12.2.4.1 StatusMsg Methods","334");
D=C.fN("12.2.4.2 StatusMsgFlags Values","335");
C=B.fN("12.2.5 Close Message Interface","336");
D=C.fN("12.2.5.1 CloseMsg Methods","337");
D=C.fN("12.2.5.2 CloseMsgFlags Values","338");
C=B.fN("12.2.6 Generic Message Class","339");
D=C.fN("12.2.6.1 GenericMsg Methods","340");
D=C.fN("12.2.6.2 GenericMsgFlags Values","341");
C=B.fN("12.2.7 Post Message Interface","342");
D=C.fN("12.2.7.1 Post Msg Methods","343");
D=C.fN("12.2.7.2 PostMsgFlags Values","344");
D=C.fN("12.2.7.3 PostUserRights Values","345");
D=C.fN("12.2.7.4 PostUserInfo Methods","346");
C=B.fN("12.2.8 Acknowledgment Message Interface","347");
D=C.fN("12.2.8.1 AckMsg Methods","348");
D=C.fN("12.2.8.2 AckMsgFlags Values","349");
D=C.fN("12.2.8.3 NakCodes Values","350");
C=B.fN("12.2.9 Msg Encoding and Decoding","351");
D=C.fN("12.2.9.1 Msg Encoding Interfaces","352");
D=C.fN("12.2.9.2 Msg Encoding Example 1","353");
D=C.fN("12.2.9.3 Msg Encoding Example 2","354");
D=C.fN("12.2.9.4 Msg Decoding Interfaces","355");
D=C.fN("12.2.9.5 Msg Decoding Example","356");
D=C.fN("12.2.9.6 EncodeIterator Utility Methods","357");
D=C.fN("12.2.9.7 DecodeIterator Utility Methods","358");
A=P.fN("Chapter 13 Advanced Messaging Concepts","359");
B=A.fN("13.1 Multi-Part Message Handling","360");
B=A.fN("13.2 Stream Priority","361");
B=A.fN("13.3 Stream Quality of Service","362");
B=A.fN("13.4 Item Group Use","363");
C=B.fN("13.4.1 Item Group Buffer Contents","364");
C=B.fN("13.4.2 Item Group Utility Functions","365");
C=B.fN("13.4.3 Group Status Message Information","366");
C=B.fN("13.4.4 Group Status Responsibilities by Application Type","367");
B=A.fN("13.5 Single Open and Allow Suspect Data Behavior","368");
B=A.fN("13.6 Pause and Resume","369");
B=A.fN("13.7 Batch Requesting","370");
C=B.fN("13.7.1 Batch Request Usage","371");
C=B.fN("13.7.2 Batch RequestMsg Encoding Example","372");
B=A.fN("13.8 Dynamic View Use","373");
C=B.fN("13.8.1 RDM ViewTypes Names","374");
C=B.fN("13.8.2 Dynamic View RequestMsg Encoding Example","375");
B=A.fN("13.9 Posting","376");
C=B.fN("13.9.1 Post Message Encoding Example","377");
C=B.fN("13.9.2 Post Acknowledgement Encoding Example","378");
B=A.fN("13.10 Visible Publisher Identifier (VPI)","379");
B=A.fN("13.11 TREP Authentication","380");
B=A.fN("13.12 Private Streams","381");
A=P.fN("Appendix A Item and Group State Decision Table","382");
}
