apply plugin: 'net.saliman.cobertura'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven'
apply plugin: 'signing'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta.json.converter"
archivesBaseName = "etaConverter"
version "$SpecificationVersion"

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            pom.project {
                name "$archivesBaseName"
                packaging 'jar'
                url 'https://github.com/Refinitiv/Real-Time-SDK'
                description 'Elektron Transport API (ETA) Java Edition Converter Classes'

                scm {
                    connection 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

cobertura {
    coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Eta-Converter-Src'
    }
}

dependencies {
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'

    compile project(':Eta:Core')

    // needed for cobertura
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
}

ext.sharedManifest = manifest {
    attributes( 'Sealed': 'true',
            'Build-Date': BuildDate,
            'Specification-Version': SpecificationVersion,
            'Specification-Vendor': vendor,
            'Implementation-Title': group,
            'Implementation-Version': etaImplementationVersion,
            'Implementation-Vendor': vendor )
}

jar {
    doFirst { println 'Creating ETA jar file' }

    manifest {
        attributes 'Specification-Title': 'Elektron Transport API (ETA) Java Edition Converter classes'
        from sharedManifest
    }

    from ('impl')
            {
                include 'com/thomsonreuters/proxy/authentication/kerberos/login.conf'
            }

    destinationDir = file("../Libs/")
    baseName = 'etajConverter'
}

javadoc {
    doFirst {
        println "Generating javadoc for ETA Converter"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/etajconverter/')
    title = "ETA Converter JAVA " +  "${SpecificationVersion}"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('ETA Converter')
}

task cleanJar (type: Delete) {
    delete "${jar.archivePath}"
}

clean.dependsOn cleanJar

task javadocJar (type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = jar.destinationDir

    manifest {
        attributes 'Specification-Title': 'Elektron Transport API (ETA) Java Edition Converter Classes'
        from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

test {
    // set to true to see the junit stdoutput
    testLogging.showStandardStreams = false
    maxParallelForks = Runtime.runtime.availableProcessors()
}


