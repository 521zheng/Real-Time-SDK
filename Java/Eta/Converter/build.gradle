apply plugin: 'net.saliman.cobertura'
apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta.json.converter"
archivesBaseName = "etajConverter"
version "$SpecificationVersion"

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications{
        mavenJava(MavenPublication){

            groupId = group
            artifactId = archivesBaseName
            version = "$SpecificationVersion"
            from components.java

            pom {
                name = "$archivesBaseName"
                packaging = 'jar'
                url = 'https://github.com/Refinitiv/Real-Time-SDK'
                description = 'Elektron Transport API (ETA) Java Edition Converter Classes'

                scm {
                    connection = 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection = 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url = 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization = 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
            name = "repository"
            def releaseRepository = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepository = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = project.version.endsWith('SNAPSHOT') ? snapshotRepository : releaseRepository
        }
    }
}

signing {
    sign configurations.archives
    sign publishing.publications.mavenJava
}

cobertura {
    coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Eta-Converter-Src'
    }
}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.7'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.7'

    implementation project(':Eta:Core')
    implementation project(':Eta:AnsiPage')

    // needed for cobertura
    testRuntimeOnly group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'
}

ext.sharedManifest = manifest {
    attributes( 'Sealed': 'true',
            'Build-Date': BuildDate,
            'Specification-Version': SpecificationVersion,
            'Specification-Vendor': vendor,
            'Implementation-Title': group,
            'Implementation-Version': etaImplementationVersion,
            'Implementation-Vendor': vendor )
}

jar {
    doFirst { println 'Creating ETA jar file' }

    manifest {
        attributes 'Specification-Title': 'Elektron Transport API (ETA) Java Edition Converter classes'
        from sharedManifest
    }

    from ('impl')
            {
                include 'com/thomsonreuters/proxy/authentication/kerberos/login.conf'
            }

    destinationDirectory.set(file("../Libs/"))
    archiveBaseName.convention('etajConverter');
    archiveBaseName.set('etajConverter');
}

javadoc {
    doFirst {
        println "Generating javadoc for ETA Converter"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/etajconverter/')
    title = "ETA Converter JAVA " +  "${SpecificationVersion}"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('ETA Converter')
}

task cleanJar (type: Delete) {
    delete "${jar.archiveFile}"
}

clean.dependsOn cleanJar

test {
    forkEvery = 1
    // set to true to see the junit stdoutput
    testLogging.showStandardStreams = false
    maxParallelForks = 1
}


