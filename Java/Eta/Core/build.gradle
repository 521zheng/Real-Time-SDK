apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven' 
apply plugin: 'signing' 

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.eta"
archivesBaseName = "eta"
version "$SpecificationVersion"

uploadArchives { 
    repositories { 
        mavenDeployer { 
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            pom.project {
                name "$archivesBaseName"
                    packaging 'jar'
                    url 'https://github.com/Refinitiv/Real-Time-SDK'
                    description 'Enterprise Transport API (ETA) Java Edition'

                    scm {
                        connection 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                            developerConnection 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                            url 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                    }

                developers {
                    developer {
                        organization 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        } 
    } 
}

signing {
	sign configurations.archives
}

cobertura {
     coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Eta-Src'
    }
}

dependencies {
		compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.3'
		compile group: 'org.apache.httpcomponents', name: 'httpclient-cache', version: '4.5.3'
		compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.3'

    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.0'

    // needed for cobertura
    testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
}

ext.sharedManifest = manifest {
        attributes( 'Sealed': 'true',
                'Build-Date': BuildDate,
                'Specification-Version': SpecificationVersion,
                'Specification-Vendor': vendor,
                'Implementation-Title': group,
                'Implementation-Version': etaImplementationVersion,
                'Implementation-Vendor': vendor )
}

jar {
    doFirst { println 'Creating UPA jar file' }

    manifest { 
        attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition'
            from sharedManifest 
    }

    from ('impl') 
    {
        include 'com/refinitiv/proxy/authentication/kerberos/login.conf'
    }

    destinationDir = file("../Libs/")
        baseName = 'eta'
}

javadoc {
    doFirst {
        println "Generating javadoc for ETA"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/etaj/')
    title = "Enterprise Transport API (ETA) " +  "${SpecificationVersion}" + " Java Edition"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.setWindowTitle ('ETA')
}

task cleanJar (type: Delete) {
        delete "${jar.archivePath}"
}

task cleanJavadoc (type: Delete) {
        delete ('../Docs/refman/')
}

clean.dependsOn cleanJar, cleanJavadoc

task javadocJar (type: Jar) {
	classifier = 'javadoc'
	from javadoc.destinationDir
        destinationDir = jar.destinationDir

        manifest {
		attributes 'Specification-Title': 'Enterprise Transport API (ETA) Java Edition'
                from sharedManifest
        }
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

test {
	// set to true to see the junit stdoutput
        testLogging.showStandardStreams = false
	maxParallelForks = Runtime.runtime.availableProcessors()
}

