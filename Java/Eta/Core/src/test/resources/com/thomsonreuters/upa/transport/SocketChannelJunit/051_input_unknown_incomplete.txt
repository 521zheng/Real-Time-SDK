This test reproduces an MR (upaj0243) where we received an
"unknown message class" error during decoding. In this
scenario, a single call to read() read a complete message,
plus the first two bytes of the next message. An off-by-one
error (<= instead of <) caused us to also read an additional
byte containing junk data (left over from previously read data)
as the RIPC flag. This in-turn caused the state machine to
incorrectly interpret the message as being "packed".<br /> 
<br />
This input file contains:
a) The RIPC handshake
b) The first message, with a total length of 34 bytes, plus
   the first two bytes of the second message, with a total
   length of 10 bytes.
c) The remaining 8 bytes of the second message

The RIPC handshake:
0000: 00 40 01 01 0A 00 00 00  00 09 18 00 03 3C 0E 01   .@...........<..
0001: 00 00 00 08 01 18 5B 34  E8 D8 31 DC 82 DE 00 00   ......[4..1.....
0002: 00 00 00 00 00 05 08 D2  CC 77 F6 25 4E C9 11 10   .........w.%N...
0003: 55 50 41 20 4A 61 76 61  20 45 64 69 74 69 6F 6E   UPA Java Edition


The hex below combines a message with a total length of 34 bytes,
with the first two bytes of the next message. (The second message
has a total length of 10 bytes.):
0000: 00 22 02
0001: 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E 0F  ........ ........
0002: 00 01 02 03 04 05 06 07  08 09 0A 0B 0C 0D 0E     ........ .......
0003: 00 0A                                             ..

The hex below is the remaining 8 bytes of the next message
0003: 02 00 01 02 03 04 05 06                           ........
