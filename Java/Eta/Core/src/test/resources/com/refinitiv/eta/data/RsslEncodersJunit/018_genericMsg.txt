# The hex data has been created with ETAC rsslTrwfMessageTest.
# The genericMsgTest function is included after the hex data.
# 
# MsgInit:
#   msgClass = GENERIC
#   domain = LOGIN
#   streamId = 2146290601 (0x7FEDCBA9)
#   genFlags = EXTENDED_HEADER | PERM_DATA | MSG_KEY | SEQ_NUM | MESSAGE_COMPLETE | SECONDARY_SEQ_NUM | PART_NUM
#   dataFormat/containerType = FIELD_LIST (0x84) - CONTAINER_TYPE_MIN (0x80) = 0x04
#   SeqNum = 1234567890
#	SecondarySeqNum = 1122334455L;
#	PartNum = 12345;
#   ExtendedHeader = data="EXTENDED HEADER", length=15
#   PermData = data={0x10, 0x11, 0x12, 0x13}, length=4 
#   Key:
#     flags = NAME | NAME_TYPE | ATTRIB
#     name = "TRI.N"
#     nameType = RIC
#     serviceId = 32639 (0x7f7f)
#     opaqDataFormat = ELEMENT_LIST (0x85) - CONTAINER_TYPE_MIN (0x80) = 0x05
#       ElementListInit
#         Entry: dataType=ASCII_STRING, name="ApplicationId", data="256"
#         Entry: dataType=ASCII_STRING, name="ApplicationName", data="rsslConsumer"
#         Entry: dataType=ASCII_STRING, name="position", data="localhost"
#       ElementListComplete
#   Payload:
#     FieldListInit
#        flags = HAS_INFO | HAS_STANDARD_DATA
#        dictionaryId=2
#        fieldListNum=3
#        FieldEntry
#          fieldId=10, dataType=REAL, BLANK
#          fieldId=175, dataType=STRING, "ABCDEFG" (pre-encoded).
#          fieldId=32, dataType=UINT, 554433
#          fieldId=111, dataType=REAL, real.value=867564, real.hint=EXP_4
#     FieldListComplete
# MsgComplete

00 7F 07 01 7F ED CB A9  7F 04 49 96 02 D2 42 E5   ........ ..I...B.
76 F7 04 10 11 12 13 80  56 27 FE 7F 7F 05 54 52   v....... V'....TR
49 2E 4E 01 05 80 48 08  00 03 0D 41 70 70 6C 69   I.N...H. ...Appli
63 61 74 69 6F 6E 49 64  11 03 32 35 36 0F 41 70   cationId ..256.Ap
70 6C 69 63 61 74 69 6F  6E 4E 61 6D 65 11 0C 72   plicatio nName..r
73 73 6C 43 6F 6E 73 75  6D 65 72 08 50 6F 73 69   sslConsu mer.Posi
74 69 6F 6E 11 09 6C 6F  63 61 6C 68 6F 73 74 0F   tion..lo calhost.
45 58 54 45 4E 44 45 44  20 48 45 41 44 45 52 B0   EXTENDED  HEADER.
39 09 03 02 00 03 00 04  00 0A 00 00 AF 07 41 42   9....... ......AB
43 44 45 46 47 00 20 03  08 75 C1 00 6F 04 0A 0D   CDEFG. . .u..o...
3C EC                                              <.

#void genericMsgTest(RsslUInt32 repeat)
#{
#	RsslGenericMsg genMsg = RSSL_INIT_GENERIC_MSG;
#	RsslMsgKey key = RSSL_INIT_MSG_KEY;
#	RsslElementList	elementList = RSSL_INIT_ELEMENT_LIST;
#	RsslElementEntry    element = RSSL_INIT_ELEMENT_ENTRY;
#	RsslFieldList	  fieldList = RSSL_INIT_FIELD_LIST;
#	RsslFieldEntry	      field = RSSL_INIT_FIELD_ENTRY;
#	RsslEncodeIterator encodeIter;
#	RsslBuffer msgBuf = RSSL_INIT_BUFFER;
#	RsslBuffer applicationId = RSSL_INIT_BUFFER;
#	RsslBuffer applicationName = RSSL_INIT_BUFFER;
#	RsslBuffer position = RSSL_INIT_BUFFER;
#	RsslBuffer buffer = RSSL_INIT_BUFFER;
#	RsslBuffer itemName = RSSL_INIT_BUFFER;
#	char permData[] = {0x10, 0x11, 0x12, 0x13};
#	RsslUInt uint;
#	RsslFieldId id = 22;
#	RsslReal real = RSSL_INIT_REAL;
#	RsslBuffer preEncodedBuffer = RSSL_INIT_BUFFER;
#
#	int ret;
#
#	printf("genericMsg Tests:\n");
#
#	rsslClearEncodeIterator(&encodeIter);
#
#	genMsg.msgBase.msgClass = RSSL_MC_GENERIC;
#	genMsg.msgBase.streamId = 2146290601; // // 0x7FEDCBA9
#	genMsg.msgBase.domainType = RSSL_DMT_LOGIN;
#	genMsg.msgBase.containerType = RSSL_DT_FIELD_LIST;
#	
#	genMsg.flags = RSSL_GNMF_HAS_EXTENDED_HEADER | RSSL_GNMF_HAS_PERM_DATA | RSSL_GNMF_HAS_MSG_KEY | RSSL_GNMF_HAS_SEQ_NUM | RSSL_GNMF_MESSAGE_COMPLETE | RSSL_GNMF_HAS_SECONDARY_SEQ_NUM | RSSL_GNMF_HAS_PART_NUM;
#
#	// set sequence number
#	genMsg.seqNum = 1234567890L;
#
#	// set secondary sequence number
#	genMsg.secondarySeqNum = 1122334455L;
#
#	// set part number
#	genMsg.partNum = 12345;
#
#	// set extended header
#	genMsg.extendedHeader.data = "EXTENDED HEADER";
#	genMsg.extendedHeader.length = 15;
#
#	// set perm data
#	genMsg.permData.data = permData;
#	genMsg.permData.length = 4;
#	
#	// set msgKey members
#	genMsg.msgBase.msgKey.flags = RSSL_MKF_HAS_ATTRIB | RSSL_MKF_HAS_NAME_TYPE | RSSL_MKF_HAS_NAME | RSSL_MKF_HAS_SERVICE_ID;
#	genMsg.msgBase.msgKey.name.data = "TRI.N";
#	genMsg.msgBase.msgKey.name.length = (RsslUInt32)5;
#	genMsg.msgBase.msgKey.nameType = RDM_INSTRUMENT_NAME_TYPE_RIC;
#	genMsg.msgBase.msgKey.attribContainerType = RSSL_DT_ELEMENT_LIST;
#	genMsg.msgBase.msgKey.serviceId = 32639; // 0x7f7f
#
#	/* encode message */
#	msgBuf.data = (char*)malloc(1024*sizeof(char));
#	msgBuf.length = 1024;
#	
#	if((ret = rsslSetEncodeIteratorBuffer(&encodeIter, &msgBuf)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslSetEncodeIteratorBuffer() failed with return code: %d\n", ret);
#		return;
#	}
#	//rsslSetEncodeIteratorRWFVersion(&encodeIter, chnl->majorVersion, chnl->minorVersion);
#	/* since our msgKey has opaque that we want to encode, we need to use rsslEncodeMsgInit */
#	/* rsslEncodeMsgInit should return and inform us to encode our key opaque */
#	if ((ret = rsslEncodeMsgInit(&encodeIter, (RsslMsg*)&genMsg, 0)) != RSSL_RET_ENCODE_MSG_KEY_OPAQUE)
#	{
#		printf("rsslEncodeMsgInit() failed with return code: %d\n", ret);
#		return;
#	}
#	
#	/* encode our msgKey opaque */
#	/* encode the element list */
#	rsslClearElementList(&elementList);
#	elementList.flags = RSSL_ELF_HAS_STANDARD_DATA;
#	if ((ret = rsslEncodeElementListInit(&encodeIter, &elementList, 0, 3)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeElementListInit() failed with return code: %d\n", ret);
#		return;
#	}
#	/* ApplicationId */
#	applicationId.data = "256";
#	applicationId.length = 3;
#	element.dataType = RSSL_DT_ASCII_STRING;
#	element.name = RSSL_ENAME_APPID;
#	if ((ret = rsslEncodeElementEntry(&encodeIter, &element, &applicationId)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeElementEntry() failed with return code: %d\n", ret);
#		return;
#	}
#	/* ApplicationName */
#	applicationName.data = "rsslConsumer";
#	applicationName.length = 12;
#	element.dataType = RSSL_DT_ASCII_STRING;
#	element.name = RSSL_ENAME_APPNAME;
#	if ((ret = rsslEncodeElementEntry(&encodeIter, &element, &applicationName)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeElementEntry() failed with return code: %d\n", ret);
#		return;
#	}
#	/* Position */
#	position.data = "localhost";
#	position.length = 9;
#	element.dataType = RSSL_DT_ASCII_STRING;
#	element.name = RSSL_ENAME_POSITION;
#	if ((ret = rsslEncodeElementEntry(&encodeIter, &element, &position)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeElementEntry() failed with return code: %d\n", ret);
#		return;
#	}
#	
#	/* complete encode element list */
#	if ((ret = rsslEncodeElementListComplete(&encodeIter, RSSL_TRUE)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeElementListComplete() failed with return code: %d\n", ret);
#		return;
#	}
#
#	/* complete encode key */
#	/* rsslEncodeMsgKeyAttribComplete finishes our key opaque, so it should return and indicate
#	   for us to encode our container/msg payload */
#	if ((ret = rsslEncodeMsgKeyAttribComplete(&encodeIter, RSSL_TRUE)) != RSSL_RET_ENCODE_CONTAINER)
#	{
#		printf("rsslEncodeMsgKeyAttribComplete() failed with return code: %d\n", ret);
#		return;
#	}
#
#	/* payload - fieldList */
#	fieldList.dictionaryId = 2;
#	fieldList.fieldListNum = 3;
#	rsslFieldListApplyHasInfo(&fieldList);
#	rsslFieldListApplyHasStandardData(&fieldList);
#
#	if ( (ret = rsslEncodeFieldListInit(&encodeIter, &fieldList, (RsslLocalFieldSetDefDb *)0, 0)) < 0)
#	{
#		printf("rsslEncodeFieldListInit failed %d\n", ret);
#		return;
#	}
#
#	// encode (10) REAL as Blank - blank to encoder.
#	rsslClearFieldEntry(&field);
#	field.fieldId = 10;
#	field.dataType = RSSL_DT_REAL;
#	if (rsslEncodeFieldEntry(&encodeIter, &field, NULL) != RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeFieldEntry() failed %d %d (%s)\n", RSSL_DT_REAL,
#				id,
#				rsslDataTypeToString(RSSL_DT_REAL));
#		return;
#	}
#
#	// encode (175) pre-encoded data
#	field.fieldId = 175;
#	field.dataType = RSSL_DT_ASCII_STRING;
#	preEncodedBuffer.data = "ABCDEFG";
#	preEncodedBuffer.length = 7;
#	field.encData.data = preEncodedBuffer.data;
#	field.encData.length = preEncodedBuffer.length;
#	if (rsslEncodeFieldEntry(&encodeIter, &field, &preEncodedBuffer) != RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeFieldEntry() failed %d %d (%s)\n", RSSL_DT_REAL,
#				id,
#				rsslDataTypeToString(RSSL_DT_REAL));
#		return;
#	}
#
#	// encode (32) UINT 554433
#	field.fieldId = 32;
#	field.dataType = RSSL_DT_UINT;
#	uint = 554433;
#	if (rsslEncodeFieldEntry(&encodeIter, &field, &uint) != RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeFieldEntry() failed %d %d (%s)\n", RSSL_DT_REAL,
#				id,
#				rsslDataTypeToString(RSSL_DT_REAL));
#		return;
#	}
#
#	// encode (111) REAL 867564 Exponent_4.
#	rsslClearFieldEntry(&field);
#	field.fieldId = 111;
#	field.dataType = RSSL_DT_REAL;
#	rsslClearReal(&real);
#	real.value = 867564;
#	real.hint = RSSL_RH_EXPONENT_4;
#	if (rsslEncodeFieldEntry(&encodeIter, &field, &real) != RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeFieldEntry() failed %d %d (%s)\n", RSSL_DT_REAL,
#				id,
#				rsslDataTypeToString(RSSL_DT_REAL));
#		return;
#	}
#
#	// fieldListComplete
#	if ( (ret = rsslEncodeFieldListComplete(&encodeIter, 1)) < 0)
#	{
#		printf("rsslEncodeFieldListComplete failed %d\n", ret);
#		return;
#	}
#	
#	/* complete encode message */
#	if ((ret = rsslEncodeMsgComplete(&encodeIter, RSSL_TRUE)) < RSSL_RET_SUCCESS)
#	{
#		printf("rsslEncodeMsgComplete() failed with return code: %d\n", ret);
#		return;
#	}
#	msgBuf.length = rsslGetEncodedBufferLength(&encodeIter);
#
#	buffer.data = encodeIter._pBuffer->data; buffer.length = rsslGetEncodedBufferLength(&encodeIter);
#	printf("rsslDataTestEncodeElementList: Hex Dump: Buffer Length %d\n",buffer.length);
#	displayHexData(buffer.length, buffer.data);
#
#	printf("\n");
#}
