<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="etaj">
	<property name="debuglevel" value="source,lines,vars"/>
	<property name="target" value="1.7"/>
	<property name="source" value="1.7"/>

	<property name="package" value="etaj3.1.1.L1.all.rrg" />
	<property name="version" value="etaj3.1.1.L1" />
	<property name="vendor" value="Thomson Reuters"/>
	<tstamp>
		<format property="TODAY" pattern=" E MMM dd HH:mm:ss z yyyy" />
	</tstamp>

	<tstamp>
		<format property="YEAR" pattern="yyyy" />
	</tstamp>

	<property name="dist.dir" value="../"/>
	<property name="submodule.dir" value="../../../Elektron-SDK-BinaryPack/Java/Eta/Libs"/>

	<property name="JUnit.reports.dir" value="${dist.dir}/buildreports/junit" />
	<property name="JUnit.html.dir" value="${JUnit.reports.dir}/html" />
	<property name="JUnit.xml.dir" value="${JUnit.reports.dir}/xml" />
	
	<property name="cobertura.reports.dir" value="${dist.dir}/buildreports/cobertura" />
	<property name="cobertura.xml.dir" value="${cobertura.reports.dir}/xml" />
	<property name="cobertura.html.dir" value="${cobertura.reports.dir}/html" />
	<property name="cobertura.src_copy.dir" value="${dist.dir}/buildreports/cobertura_src_copy" />

	<property name="libs.dir" value="${dist.dir}/Libs"/>
	<property name="src.dir" value="${dist.dir}/Source" />
	<property name="shared.dir" value="../Applications/Shared" />
	<property name="bin.dir" value="${src.dir}/bin"/>	
	<property name="stubs.dir" value="${bin.dir}/stubs"/>
	<property name="test.dir" value="${dist.dir}/TestTools/UnitTests"/>

	<property name="docs.dir" value="${dist.dir}/Docs" />
	<property name="docs.refman.dir" value="${docs.dir}/refman" />
	<property name="docs.refman.upaj.dir" value="${docs.refman.dir}/upaj" />

	<!-- the root of all build and runtime dependiences -->
	<property name="ApacheClient.dir" value="${submodule.dir}/ApacheClient" />
	<property name="ApacheClientLocal.dir" value="${libs.dir}/ApacheClient" />

	<property name="JUnit.dir" value="${libs.dir}/JUnit" />
	<property name="Mockito.dir" value="${libs.dir}/Mockito" />
	<property name="cobertura.dir" value="${libs.dir}/cobertura"/>
	<property name="bin.cobertura.dir" value="${src.dir}/cobertura_instrumented"/>

	<!-- the path to the http Apache Client runtime -->
	<path id="ApacheClient.classpath">
		<pathelement location="${ApacheClient.dir}/commons-codec-1.4.jar" />
		<pathelement location="${ApacheClient.dir}/commons-logging-1.1.1.jar" />
		<pathelement location="${ApacheClient.dir}/httpclient-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpclient-cache-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpcore-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpmime-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/commons-codec-1.4.jar" />
		<pathelement location="${ApacheClientLocal.dir}/commons-logging-1.1.1.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpclient-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpclient-cache-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpcore-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpmime-4.1.2.jar" />
	</path>

	<path id="JUnit.classpath">
		<pathelement location="${JUnit.dir}/junit-4.12.jar" />
		<pathelement location="${JUnit.dir}/org.hamcrest.core_1.3.0.v201303031735.jar" />
	</path>

	<path id="Mockito.classpath">
		<pathelement location="${Mockito.dir}/mockito-all-1.9.0.jar" />
	</path>

	<path id="ETA.classpath">
		<pathelement location="${libs.dir}/upa.jar" />
	</path>

	<path id="ETAValueAdd.classpath">
		<pathelement location="${libs.dir}/upaValueAdd.jar" />
	</path>


	<!-- marshalling directory (temporary directory for various files) -->
	<property name="marshall.dir" value="temp" />

	<target name="initJunit">
		<echo message="Creating a directory for the JUnit output" />
		<mkdir dir="${JUnit.html.dir}"/>
		<delete dir="${JUnit.xml.dir}" quiet="true"/>
		<mkdir dir="${JUnit.xml.dir}"/>
	</target>

	<target name="initCobertura">
		<echo message="Cleaning up old cobertura instrumented classes and report data" />
		<delete dir="${bin.cobertura.dir}" quiet="true"/>
		<delete dir="${cobertura.xml.dir}" quiet="true"/>
		<delete dir="${cobertura.src_copy.dir}" quiet="true"/>
		<delete>
			<fileset dir="${dist.dir}">
				<include name="**/cobertura.ser"/>
			</fileset>
		</delete>
		<echo message="Creating a directory for the Cobertura output" />
		<mkdir dir="${cobertura.xml.dir}" />
		<mkdir dir="${cobertura.html.dir}" />
		<mkdir dir="${cobertura.src_copy.dir}" />
		<mkdir dir="${bin.cobertura.dir}"/>
	</target>

	<target name="init">
		<echo message="Creating a directory for the compiler output" />
		<mkdir dir="${bin.dir}"/>
		<mkdir dir="${libs.dir}"/>
	</target>

	<target name="clean">
		<echo message="Cleaning up old build output" />
		<delete dir="${bin.dir}" quiet="true"/>
	</target>

	<target depends="clean,init" name="build-etaj">
		<echo message="Building the eta source" />
		<echo message="Compiling ETAJ source code"/>
		<javac debug="true" debuglevel="${debuglevel}" destdir="${bin.dir}" source="${source}" target="${target}" includeantruntime="false" excludes="Stubs/**,Tests/**/*Junit*,Tests/**/*Test*,Tests/**/valueadd/**">
			<src path="${src.dir}"/>
			<src path="${shared.dir}"/>
			<src path="${test.dir}"/>
			<classpath refid="ApacheClient.classpath" />
		</javac>
		
		<copy file="${src.dir}/impl/com/thomsonreuters/proxy/authentication/kerberos/login.conf" todir="${bin.dir}/com/thomsonreuters/proxy/authentication/kerberos"/>

		<echo message="Creating the ETA jar files"/>
		<jar destfile="${libs.dir}/upa.jar" basedir="${bin.dir}" includes="**/proxy/**/*.class,**/proxy/**/*.conf,**/upa/codec/**/*.class,**/upa/rdm/**/*.class,**/transport/**/*.class" excludes="**/*Junit*.class,**/*Test*.class">
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Specification-Title" value="Elektron Transport API (ETA) Java Edition" />
				<attribute name="Specification-Version" value="${package}" />
				<attribute name="Specification-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="com.thomsonreuters.upa" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="${TODAY} ${vendor}" />
			</manifest>
		</jar>
		<jar destfile="${libs.dir}/upaValueAdd.jar" basedir="${bin.dir}" includes="**/upa/valueadd/common/**/*.class,**/upa/valueadd/domainrep/**/*.class,**/upa/valueadd/reactor/**/*.class" excludes="**/test/**/*.class">
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Specification-Title" value="Elektron Transport API (ETA) Java Edition ValueAdd Classes" />
				<attribute name="Specification-Version" value="${package}" />
				<attribute name="Specification-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="com.thomsonreuters.upa.valueadd" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="${TODAY} ${vendor}" />
			</manifest>
		</jar>
		
		<jar destfile="${libs.dir}/ansipage.jar" basedir="${bin.dir}" includes="**/ansi/**/*.class,com/thomsonreuters/upa/ansipage/**/*.class">
		</jar>
	</target>

	<!-- this target creates and packages the javadoc -->
	<target depends="init" name="package-docs">
		<echo message="ETA Java API javadoc" />
		<delete dir="${marshall.dir}" />
		<copy todir="${marshall.dir}">
			<fileset dir="${src.dir}/impl">
				<include name="**/*.*" />
			</fileset>
			<fileset dir="${src.dir}/interface">
				<include name="**/*.*" />
			</fileset>
			<fileset dir="${test.dir}/Tests">
				<include name="**/replay/**" />
				<include name="**/ByteRoutines*" />
				<exclude name="**/*Junit*" />
			</fileset>
		</copy>

		<javadoc sourcepath="${marshall.dir}" classpath="${ApacheClient.dir}/commons-codec-1.4.jar;${ApacheClient.dir}/httpclient-4.1.2.jar;${ApacheClient.dir}/httpclient-cache-4.1.2.jar;${ApacheClient.dir}/httpcore-4.1.2.jar;${ApacheClient.dir}/httpmime-4.1.2.jar;${ApacheClientLocal.dir}/commons-codec-1.4.jar;${ApacheClientLocal.dir}/httpclient-4.1.2.jar;${ApacheClientLocal.dir}/httpclient-cache-4.1.2.jar;${ApacheClientLocal.dir}/httpcore-4.1.2.jar;${ApacheClientLocal.dir}/httpmime-4.1.2.jar" defaultexcludes="yes" destdir="${docs.refman.upaj.dir}" author="true" version="true" use="true" windowtitle="ETAJ API">
			<doctitle>
			<![CDATA[<h1>Elektron Transport API (ETA) 3.0 - Java Edition</h1>]]></doctitle>
			<bottom>
			<![CDATA[<i>Copyright &#169; ${YEAR}  Thomson Reuters. All Rights Reserved.</i>]]></bottom>
		</javadoc>

		<delete dir="${marshall.dir}" />
	</target>

	<target depends="init" name="build-stubs">
		<echo message="Building the ETAJ Stubs" />		
		<mkdir dir="${bin.dir}/stubs"/>
		<echo message="${ant.project.name}: ${ant.file}" />
		<echo message="Compiling the project" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${stubs.dir}" source="${source}" target="${target}" includeantruntime="false">
			<compilerarg value="-Werror" />
			<compilerarg value="-Xlint:-options" />
			<!-- treat warnings as errors -->
			<src path="${src.dir}/interface/com/thomsonreuters/upa/valueadd/cache" />
			<src path="${src.dir}/Stubs/internal" />
			<src path="${src.dir}/Stubs/external" />
		</javac>
		<echo message="Creating the ETAJ Stubs jar file"/>
		<jar destfile="${stubs.dir}/upa.jar" basedir="${stubs.dir}" includes="**/upa/codec/**/*.class,**/upa/rdm/**/*.class,**/transport/**/*.class">
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Specification-Title" value="Elektron Transport API (ETA) Java Edition" />
				<attribute name="Specification-Version" value="${package}" />
				<attribute name="Specification-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="com.thomsonreuters.upa" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="${TODAY} ${vendor}" />
			</manifest>
		</jar>
		<jar destfile="${stubs.dir}/upaValueAddCache.jar" basedir="${stubs.dir}" includes="**/upa/valueadd/cache/**/*.class">
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Specification-Title" value="Elektron Transport API (ETA) Java Edition ValueAdd Cache Classes" />
				<attribute name="Specification-Version" value="${package}" />
				<attribute name="Specification-Vendor" value="${vendor}" />
				<attribute name="Implementation-Title" value="com.thomsonreuters.upa.valueadd.cache" />
				<attribute name="Implementation-Version" value="${version}" />
				<attribute name="Implementation-Vendor" value="${TODAY} ${vendor}" />
			</manifest>
		</jar>
	</target>

	<target depends="clean,init,initJunit" name="build-junit">
		<echo message="Build JUnit tests" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${bin.dir}" source="${source}" target="${target}" includeantruntime="false" excludes="Stubs/**" >
			<src path="${src.dir}" />
			<src path="${shared.dir}" />
			<src path="${test.dir}" />
			<classpath refid="ApacheClient.classpath" />
			<classpath refid="JUnit.classpath" />
			<classpath refid="Mockito.classpath" />
		</javac>
	</target>

	<target depends="build-junit" name="run-junit">
		<echo message="Running ETA JUnit tests" />
		<junit timeout="2700000" fork="yes" haltonerror="false" haltonfailure="false" dir="../../../" forkmode="perTest" printSummary="yes" showoutput="true" outputtoformatters="true">
			<!-- enable assertions (Java's assert keyword) when running tests -->
			<jvmarg value="-enableassertions" />

			<classpath refid="JUnit.classpath" />
			<classpath refid="Mockito.classpath" />
			<classpath location="${bin.dir}" />

			<formatter type="xml" />
			<!-- run any test file with *JUnit*.java -->
			<batchtest todir="${JUnit.xml.dir}" unless="testcase">
				<fileset dir="${test.dir}/Tests">
					<include name="**/*J?nit*.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- create the html report -->
		<echo message="Creating the JUnit html report" />

		<junitreport todir="${JUnit.html.dir}">
			<fileset dir="${JUnit.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${JUnit.html.dir}" format="noframes" />
		</junitreport>

	</target>

	<!-- Begin Cobertura (code coverage) -->
	<!-- Make instrument for Cobertura engine -->
	<!-- based on https://github.com/cobertura/cobertura/wiki/Ant-Task-Reference -->
	<target name="cobertura-instrument" depends="build-junit,initCobertura">
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura-2.1.1.jar" />
				<include name="lib/**/*.jar" />
			</fileset>
		</path>
		
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

		<!-- Instrument the application classes, writing the instrumented classes into ${build.instrumented.dir}. -->
		<cobertura-instrument todir="${bin.cobertura.dir}">
			<!-- The following line causes instrument to ignore any source line containing a reference to log4j, 
			for the purposes of coverage reporting. -->
			<ignore regex="org.apache.log4j.*" />

			<fileset dir="${bin.dir}">
				<!-- Instrument all the application classes, but don't instrument the test classes. -->
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<!-- Run Junit and generate coverage reports -->
	<!-- Based on https://wiki.jenkins-ci.org/display/JENKINS/Cobertura+Plugin -->
	<target name="cobertura-test-coverage">
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura-2.1.1.jar" />
				<include name="lib/**/*.jar" />
			</fileset>
		</path>
		
		<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
		
		<echo message="Running insturmented ETA JUnit tests" />
		<junit timeout="2700000" fork="yes" haltonerror="false" haltonfailure="false" dir="../../../" forkmode="perTest" printSummary="yes" showoutput="true" outputtoformatters="true">
			<jvmarg value="-enableassertions" />

			<!--
				Note the classpath order: instrumented classes are before the
				original (uninstrumented) classes.  This is important.
			-->
			<classpath refid="JUnit.classpath" />
			<classpath refid="Mockito.classpath" />
			<classpath location="${bin.cobertura.dir}" />
			<classpath location="${bin.dir}" />

			<!--
				The instrumented classes reference classes used by the
				Cobertura runtime, so Cobertura and its dependencies
				must be on your classpath.
			-->
			<classpath refid="cobertura.classpath" />
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>

			<formatter type="xml" />
			<batchtest todir="${JUnit.xml.dir}" unless="testcase">
				<fileset dir="${test.dir}/Tests">
					<include name="**/*J?nit*.java" />
				</fileset>
			</batchtest>
		</junit>

		<!-- create the html report -->
		<echo message="Creating the JUnit html report" />
		<junitreport todir="${JUnit.html.dir}">
			<fileset dir="${JUnit.xml.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${JUnit.html.dir}" format="noframes" />
		</junitreport>

		<!-- 
		Copy all source to a common directory.
		Works around an issue with Cobertura 2.1.1 where specifying multiple filesets
		does not work (https://github.com/cobertura/cobertura/issues/252 )
		-->
		<copy todir="${cobertura.src_copy.dir}">
			<fileset dir="${src.dir}/impl">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.dir}/interface">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.dir}/Tests">
				<include name="**/*.java" />
			</fileset>
		</copy>
		
		<echo message="Merging cobertura .ser files"/>
		<cobertura-merge datafile="${cobertura.reports.dir}/cobertura.ser">
			<fileset dir="${dist.dir}">
				<include name="**/cobertura.ser"/>
			</fileset>
		</cobertura-merge>

		<echo message="creating code coverage report"/>
		<cobertura-report datafile="${cobertura.reports.dir}/cobertura.ser" destdir="${cobertura.xml.dir}" format="xml">
			<fileset dir="${cobertura.src_copy.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
		
		<cobertura-report datafile="${cobertura.reports.dir}/cobertura.ser" destdir="${cobertura.html.dir}" format="html">
			<fileset dir="${cobertura.src_copy.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
	</target>

	<target depends="clean,build-etaj" name="all"/>
	<target depends="clean,build-etaj" name="build"/>
	<target depends="clean,cobertura-instrument" name="build-cobertura"/>
	<target depends="clean,cobertura-instrument,cobertura-test-coverage" name="run-cobertura-tests"/>

</project>
