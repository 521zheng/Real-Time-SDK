function FileData_Pairs(x)
{
x.t("m.parentnode.insertbefore","window");
x.t("version","dictionary");
x.t("version","information");
x.t("every","service");
x.t("lists","dictionaryname");
x.t("needs","update");
x.t(".l=1","new");
x.t("create","ua-55718642-4");
x.t("refer","section");
x.t("related","dictionaries");
x.t("downloaded","parse");
x.t("5.7","special");
x.t("basic","information");
x.t("payload","obtain");
x.t("type","version");
x.t("type","dictionary");
x.t("discover","dictionaries");
x.t("dictionaryname","dictionariesprovided");
x.t("tend","large");
x.t("response","parse");
x.t("filterentry","refer");
x.t("a=s.createelement","(o)");
x.t("listed","dictionariesused");
x.t("dictionary_info","request");
x.t("needed","reissue");
x.t("new","date");
x.t("document","script");
x.t("includes","two");
x.t("pageview","elektron");
x.t("5.7.1","dictionariesprovided");
x.t("api","java");
x.t("filter","requests");
x.t("filter","reqmsg");
x.t("network","traffic");
x.t("parse","summarydata");
x.t("parse","dictionariesprovided");
x.t("parse","dictionariesused");
x.t("large","setting");
x.t("traffic","dictionary");
x.t("desired","service");
x.t("name","listed");
x.t("name","request");
x.t("obtain","dictionary\u2019s");
x.t("dictionary","response");
x.t("dictionary","needed");
x.t("dictionary","name");
x.t("dictionary","unneeded");
x.t("dictionary","stream");
x.t("dictionary","domain");
x.t("dictionary","chapter");
x.t("dictionary","names");
x.t("closed","dictionary");
x.t("window","document");
x.t("summarydata","payload");
x.t("ascii","dictionary");
x.t("determine","consumer");
x.t("array","ascii");
x.t("minimizing","amount");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("contain","array");
x.t("unneeded","type");
x.t("stream","closed");
x.t("auto","send");
x.t("request","dictionary");
x.t("request","dictionaries");
x.t("request","made");
x.t("request","dictionary\u2019s");
x.t("domain","5.7");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("dictionaries","tend");
x.t("dictionaries","minimizing");
x.t("dictionaries","dictionariesprovided");
x.t("dictionaries","dynamically");
x.t("chapter","dictionary");
x.t("requests","higher");
x.t("directoryinfo","filterentry");
x.t("section","4.3.1.1");
x.t("directory","parse");
x.t("directory","streaming");
x.t("reqmsg","dictionary_info");
x.t("verbosity","e.g");
x.t("consumer","needs");
x.t("message","api");
x.t("java","edition");
x.t("e.g","dictionary_normal");
x.t("dictionariesprovided","every");
x.t("dictionariesprovided","filter");
x.t("dictionariesprovided","dictionariesused");
x.t("made","filter");
x.t("amount","data");
x.t("directory\u2019s","directoryinfo");
x.t("send","pageview");
x.t("(arguments)","[r]");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("elektron","message");
x.t("script","//www.google-analytics.com/analytics.js");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("data","downloaded");
x.t("information","dictionaries");
x.t("information","used");
x.t("semantics","5.7.1");
x.t("semantics","function");
x.t("4.3.1.1","includes");
x.t("reissue","request");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("two","elements");
x.t("dictionary\u2019s","basic");
x.t("dictionary\u2019s","type");
x.t("prevents","unnecessary");
x.t("edition","5.7");
x.t("special","semantics");
x.t(".q=i","[r]");
x.t("elements","related");
x.t("elements","contain");
x.t("used","name");
x.t("used","determine");
x.t("service","lists");
x.t("service","directory");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("streaming","request");
x.t("setting","prevents");
x.t("dictionary_normal","version");
x.t("a.async=1","a.src=g");
x.t("dictionariesused","desired");
x.t("dictionariesused","directory\u2019s");
x.t("dictionariesused","elements");
x.t("dictionariesused","service");
x.t("googleanalyticsobject","[r]");
x.t("names","used");
x.t("names","names");
x.t("unnecessary","network");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("dynamically","discover");
x.t("higher","verbosity");
x.t("update","dictionary");
}
