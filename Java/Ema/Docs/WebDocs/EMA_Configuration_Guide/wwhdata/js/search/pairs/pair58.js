function FileData_Pairs(x)
{
x.t("ommniproviderconfig::admincontroldirectory","usercontrolenum");
x.t("ommniproviderconfig::admincontroldirectory","apicontrolenum");
x.t("compressiontype::none","guaranteedoutputbuffers");
x.t("supports","qos");
x.t("supports","band");
x.t("dictionarytype","dictionarytype::filedictionary");
x.t("dictionarytype","value");
x.t("dictionarytype","optional");
x.t("dictionarytype","channeldictionary");
x.t("rwffld_id3","enumtypedefitemname");
x.t("appendix","emaconfig.xml");
x.t("m.parentnode.insertbefore","window");
x.t("parameter","defines");
x.t("parameter","specified");
x.t("usercontrolenum","allows");
x.t("possible","values");
x.t("provide","item");
x.t("rwffld_id4","enumtypedefitemname");
x.t("version","1.0");
x.t("version","emaconfig.xml");
x.t("defines","provider");
x.t("defines","consumer");
x.t("defaulted","possible");
x.t("defaulted","30000");
x.t("defaulted","none");
x.t("defaulted","rdmfielddictionary");
x.t("defaulted","rssl_socket");
x.t("defaulted","./rdmfielddictionary");
x.t("defaulted","channeldictionary");
x.t("rdm","capability");
x.t("rdm","usage");
x.t("rdm","defined");
x.t("30000","tcpnodelay");
x.t("30000","connectionpingtimeout");
x.t("shown","dictionariesprovided");
x.t(".l=1","new");
x.t("create","ua-55718642-4");
x.t("refer","directory");
x.t("refer","examples");
x.t("(7)","market_by_price");
x.t("emardm.h","file");
x.t("channel_10","directory");
x.t("source","directory");
x.t("always","assume");
x.t("providers","refer");
x.t("providers","always");
x.t("providers","application");
x.t("providers","specify");
x.t("niprovider","name");
x.t("apply","items");
x.t("dictionarylist","dictionary");
x.t("dictionarylist","dictionarygroup");
x.t("current","version");
x.t("channeltype","possible");
x.t("channeltype","value");
x.t("qos","range");
x.t("qos","means");
x.t("qos","qosentry");
x.t("qos","supportsqosrange");
x.t("qos","values");
x.t("nochange","suspect");
x.t("dictionarytype::channeldictionary","dictionary");
x.t("field","statustext");
x.t("enumtype.def","rdmfielddictionaryitemname");
x.t("enumtype.def","rdmfielddictionaryfilename");
x.t("directory_1","directorylist");
x.t("directory_1","service");
x.t("directory_1","/niprovider");
x.t("support","means");
x.t("provided","service");
x.t("directory_2","/niprovider");
x.t("type","----");
x.t("populate","service::infofilter::dictionariesprovided");
x.t("populate","service::infofilter::dictionariesused");
x.t("change","apply");
x.t("open","close");
x.t("close","closerecover");
x.t("enumtypedefitemname","value");
x.t("mandatory","name");
x.t("channeltype::rssl_socket","tcp");
x.t("channeltype::rssl_socket","compressiontype");
x.t("enumtypedeffilename","value");
x.t("connection","type");
x.t("rate","value");
x.t("down","means");
x.t("a=s.createelement","(o)");
x.t("ommconsumer","application");
x.t("default","providers");
x.t("default","acceptingrequests");
x.t("default","consumer");
x.t("default","values");
x.t("default","servicestate");
x.t("channel","channel");
x.t("channel","channellist");
x.t("channel","name");
x.t("channel","value");
x.t("channel","optional");
x.t("channellist","channel");
x.t("channellist","channelgroup");
x.t("original","provider");
x.t("listed","emardm.h");
x.t("listed","ommqos.h");
x.t("listed","ommstate.h");
x.t(".itemlist","means");
x.t("text","field");
x.t("new","date");
x.t("single","service");
x.t("items","provided");
x.t("items","desired");
x.t("guaranteedoutputbuffers","value");
x.t("element","respective");
x.t("document","script");
x.t("niprovidergroup","provides");
x.t("niprovidergroup","defaultniprovider");
x.t("configurations","used");
x.t("publish","items");
x.t("tcpnodelay","value");
x.t("tcpnodelay","optional");
x.t("file","current");
x.t("file","function");
x.t("file","e.g");
x.t("file","distributed");
x.t("file","names");
x.t("file","ema");
x.t("pageview","elektron");
x.t("list","qos");
x.t("list","dictionary");
x.t("list","itemlist");
x.t("status","possible");
x.t("status","change");
x.t("status","acceptingconsumerstatus");
x.t("status","statefilter");
x.t("rwfenum","enumtype.def");
x.t("5000","host");
x.t("5000","connectionpingtimeout");
x.t("assign","serviceid");
x.t("api","java");
x.t("dictionary_1","dictionarytype");
x.t("dictionary_1","dictionariesprovidedentry");
x.t("dictionary_1","consumer");
x.t("dictionary_1","dictionariesprovided");
x.t("dictionary_1","dictionariesused");
x.t("hardcoded","refer");
x.t("hardcoded","ni_pub");
x.t("hardcoded","directory");
x.t("/niprovidergroup","channelgroup");
x.t("guide","may");
x.t("acceptingrequests","statefilter");
x.t("acceptingrequests","value");
x.t("acceptingrequests","non");
x.t("assume","dictionarytype");
x.t("dictionary_2","dictionarytype");
x.t("dictionary_2","consumer");
x.t("dictionary_2","dictionariesused");
x.t("tcp","connection");
x.t("domains","listed");
x.t("domains","supported");
x.t("domains","defined");
x.t("accepts","default");
x.t("accepts","consumer");
x.t("specified","defaultconsumer");
x.t("specified","dictionarygroup");
x.t("specified","defaultniprovider");
x.t("specified","using");
x.t("specified","names");
x.t("specified","ema");
x.t("consumer_1","channel");
x.t("consumer_1","consumerlist");
x.t("defaults","ommniproviderconfig::admincontroldirectory");
x.t("defaults","rdm");
x.t("desired","ommniproviderconfig::admincontroldirectory");
x.t("desired","custom");
x.t("dictionary_3","providers");
x.t("dictionary_3","dictionariesprovided");
x.t("emaconfig","appendix");
x.t("emaconfig","consumergroup");
x.t("defaultconsumer","parameter");
x.t("defaultconsumer","value");
x.t("name","possible");
x.t("name","mandatory");
x.t("name","directory");
x.t("name","issource");
x.t("name","defaultdirectory");
x.t("name","value");
x.t("name","names");
x.t("name","item");
x.t("consumer_2","channel");
x.t("range","supportsqosrange");
x.t("streamstate","value");
x.t("dictionary_4","dictionarytype");
x.t("dictionary","dictionarylist");
x.t("dictionary","file");
x.t("dictionary","name");
x.t("dictionary","dictionary");
x.t("dictionary","itemname");
x.t("dictionary","value");
x.t("dictionary","optional");
x.t("dictionary","names");
x.t("acceptingconsumerstatus","value");
x.t("follows","interactive");
x.t("14002","channel");
x.t("provider","provide");
x.t("provider","directorygroup");
x.t("provider","issource");
x.t("provider","configuration");
x.t("provider","niproviderlist");
x.t("provider","servicestate");
x.t("custom","directory");
x.t("mmt_market_price","mmt_market_by_order");
x.t("mmt_market_price","capabilitiesentry");
x.t("window","document");
x.t("provides","hardcoded");
x.t("provides","detailed");
x.t("14003","channel");
x.t("none","possible");
x.t("none","dacsdown");
x.t("none","zlib");
x.t("consumergroup","niprovidergroup");
x.t("consumergroup","defaultconsumer");
x.t("ommniproviderconfig::providername","niprovidergroup");
x.t("ommniproviderconfig::providername","first");
x.t("market_by_order","(7)");
x.t("dictionariesprovidedentry","value");
x.t("./enumtype_id4.def","rdmfielddictionaryitemname");
x.t("directorygroup","dictionarygroup");
x.t("directorygroup","directory");
x.t("directorygroup","defaultdirectory");
x.t("allows","applications");
x.t("respective","itemname");
x.t("array","market");
x.t("snapshots","supportsoutofbandsnapshots");
x.t("(o)","m=s.getelementsbytagname");
x.t("(o)","[0]");
x.t("auto","send");
x.t("localhost","14002");
x.t("localhost","14003");
x.t("localhost","port");
x.t("ni_pub","infofilter");
x.t("ni_pub","service");
x.t("ni_pub","ema");
x.t("timeliness::inexactdelayed","rate");
x.t("band","snapshots");
x.t("statustext","value");
x.t("configured","named");
x.t("tcp_nodelay","tcpnodelay");
x.t("tcp_nodelay","option");
x.t("supported","service");
x.t("interactive","provider");
x.t("1.0","encoding");
x.t("(6)","market_by_order");
x.t("refresh","configuration");
x.t("dictionarygroup","dictionarylist");
x.t("dictionarygroup","emaconfig");
x.t("dictionarygroup","ema");
x.t("itemlist","value");
x.t("emaconfig.xml","file");
x.t("emaconfig.xml","configuration");
x.t("first","provider");
x.t("first","consumer");
x.t("apicontrolenum","applications");
x.t("means","supports");
x.t("means","support");
x.t("means","original");
x.t("means","accepts");
x.t("means","accept");
x.t("means","consolidation");
x.t("means","service");
x.t("accept","means");
x.t("control","directory");
x.t("refered","name");
x.t("function","[r]");
x.t("function","googleanalyticsobject");
x.t("channelgroup","source");
x.t("channelgroup","channellist");
x.t("lz4","compressiontype");
x.t("infofilter","dictionary");
x.t("infofilter","statefilter");
x.t("infofilter","dictionariesprovided");
x.t("infofilter","optional");
x.t("infofilter","service");
x.t("serviceid","value");
x.t("consolidation","service");
x.t("dictionarytype::filedictionary","dictionarytype");
x.t("dictionarytype::filedictionary","dictionary");
x.t("dictionarytype::filedictionary","rdmfielddictionaryfilename");
x.t("specifies","status");
x.t("specifies","directory");
x.t("specifies","configuration");
x.t("may","specified");
x.t("may","refered");
x.t("statefilter","means");
x.t("statefilter","optional");
x.t("statefilter","service");
x.t("streamstate::open","possible");
x.t("datastate","value");
x.t("statuscode::none","text");
x.t("represents","names");
x.t("ommconsumerconfig::consumername","first");
x.t("detailed","configurations");
x.t("instead","hardcoded");
x.t("itemname","represents");
x.t("itemname","optional");
x.t("itemname","values");
x.t("closerecover","streamstate");
x.t("ignored","dictionarytype");
x.t("xml","version");
x.t("directory","name");
x.t("directory","configured");
x.t("directory","refresh");
x.t("directory","infofilter");
x.t("directory","may");
x.t("directory","directorylist");
x.t("directory","value");
x.t("directory","services");
x.t("directory","optional");
x.t("directory","used");
x.t("directory","containing");
x.t("directory","ema");
x.t("directorylist","providers");
x.t("directorylist","directorygroup");
x.t("issource","value");
x.t("qosentry","qos");
x.t("qosentry","qosentry");
x.t("qosentry","timeliness");
x.t("datastate::ok","possible");
x.t("rdmfielddictionary","enumtype.def");
x.t("rdmfielddictionary","rwfenum");
x.t("rwffld","rdmfielddictionary");
x.t("ommniproviderconfig::addadminmsg","desired");
x.t("capability","market_price");
x.t("market_price","(6)");
x.t("defaultdirectory","specifies");
x.t("defaultdirectory","value");
x.t("mmt_market_by_order","capabilities");
x.t("mmt_market_by_order","note");
x.t("service::infofilter::dictionariesprovided","element");
x.t("service::infofilter::dictionariesused","element");
x.t("ommqos.h","file");
x.t("filedictionary","channeldictionary");
x.t("consumer","parameter");
x.t("consumer","status");
x.t("consumer","name");
x.t("consumer","consumer");
x.t("consumer","configuration");
x.t("consumer","consumerlist");
x.t("supportsqosrange","value");
x.t("./enumtype_id3.def","dictionary");
x.t("message","api");
x.t("(8)","market_maker");
x.t("option","tcp_nodelay");
x.t("dictionariesusedentry","value");
x.t("rdmfielddictionaryitemname","value");
x.t("java","edition");
x.t("122.1.1.100","port");
x.t("e.g","mmt_market_price");
x.t("rdmfielddictionaryfilename","value");
x.t("defaultniprovider","parameter");
x.t("defaultniprovider","value");
x.t("provider_1","channel");
x.t("provider_1","niproviderlist");
x.t("dictionariesprovided","list");
x.t("dictionariesprovided","dictionariesprovidedentry");
x.t("dictionariesprovided","dictionariesused");
x.t("dacsdown","statuscode");
x.t("configuration","file");
x.t("configuration","used");
x.t("configuration","setting");
x.t("rssl_socket","localhost");
x.t("provider_2","channel");
x.t("----","channeltype");
x.t("----","----");
x.t("compressiontype","value");
x.t("compressiontype","optional");
x.t("market","domains");
x.t("capabilitiesentry","value");
x.t("rate::justintimeconflated","qosentry");
x.t("value","compressiontype::none");
x.t("value","rwffld_id3");
x.t("value","rwffld_id4");
x.t("value","30000");
x.t("value","channel_10");
x.t("value","dictionarytype::channeldictionary");
x.t("value","directory_1");
x.t("value","directory_2");
x.t("value","channeltype::rssl_socket");
x.t("value",".itemlist");
x.t("value","status");
x.t("value","5000");
x.t("value","dictionary_1");
x.t("value","dictionary_2");
x.t("value","consumer_1");
x.t("value","specified");
x.t("value","dictionary_3");
x.t("value","consumer_2");
x.t("value","name");
x.t("value","dictionary_4");
x.t("value","14002");
x.t("value","mmt_market_price");
x.t("value","./enumtype_id4.def");
x.t("value","array");
x.t("value","localhost");
x.t("value","timeliness::inexactdelayed");
x.t("value","ni_pub");
x.t("value","means");
x.t("value","infofilter");
x.t("value","dictionarytype::filedictionary");
x.t("value","streamstate::open");
x.t("value","statuscode::none");
x.t("value","datastate::ok");
x.t("value","mmt_market_by_order");
x.t("value","./enumtype_id3.def");
x.t("value","122.1.1.100");
x.t("value","provider_1");
x.t("value","provider_2");
x.t("value","rate::justintimeconflated");
x.t("value","capabilitiesentry");
x.t("value","./enumtype.def");
x.t("value","channel_1");
x.t("value","rate::tickbytick");
x.t("value","channel_2");
x.t("value","host");
x.t("value","optional");
x.t("value","capabilities");
x.t("value","./rdmfielddictionary");
x.t("value","channel_4");
x.t("value","timeliness::realtime");
x.t("value","test_ni_pub");
x.t("value","vendor");
x.t("value","company");
x.t("value","rwfenum_id3");
x.t("value","rwfenum_id4");
x.t("value","./rdmfielddictionary_id3");
x.t("value","./rdmfielddictionary_id4");
x.t("named","providers");
x.t("named","ni_pub");
x.t("named","used");
x.t("zlib","lz4");
x.t("usage","guide");
x.t("./enumtype.def","dictionary");
x.t("./enumtype.def","rdmfielddictionaryfilename");
x.t("send","pageview");
x.t("(arguments)","[r]");
x.t("market_maker","directory");
x.t("m=s.getelementsbytagname","(o)");
x.t("[0]","a.async=1");
x.t("elektron","message");
x.t("market_by_price","(8)");
x.t("services","provider");
x.t("ommstate.h","file");
x.t("script","//www.google-analytics.com/analytics.js");
x.t("channel_1","channeltype");
x.t("channel_1","dictionary");
x.t("rate::tickbytick","qosentry");
x.t(".push","(arguments)");
x.t("ua-55718642-4","auto");
x.t("optional","defaulted");
x.t("optional","default");
x.t("optional","specifies");
x.t("optional","value");
x.t("optional","ema");
x.t("channel_2","channeltype");
x.t("channel_2","dictionary");
x.t("host","value");
x.t("data","directory");
x.t("capabilities","qos");
x.t("capabilities","list");
x.t("capabilities","may");
x.t("capabilities","capabilitiesentry");
x.t("./rdmfielddictionary","enumtypedeffilename");
x.t("./rdmfielddictionary","./enumtype.def");
x.t("examples","directorygroup");
x.t("examples","xml");
x.t("defined","rdm");
x.t("defined","domains");
x.t("application","specifies");
x.t("application","specify");
x.t("channel_4","directory");
x.t("values","nochange");
x.t("values","open");
x.t("values","channeltype::rssl_socket");
x.t("values","listed");
x.t("values","follows");
x.t("values","none");
x.t("values","tcp_nodelay");
x.t("values","supported");
x.t("values","means");
x.t("values","rwffld");
x.t("values","filedictionary");
x.t("values","dictionariesprovided");
x.t("values","dictionariesused");
x.t("timeliness::realtime","rate");
x.t("connectionpingtimeout","value");
x.t("connectionpingtimeout","optional");
x.t("port","value");
x.t("supportsoutofbandsnapshots","value");
x.t("date","a=s.createelement");
x.t("//www.google-analytics.com/analytics.js","create");
x.t("niproviderlist","niprovider");
x.t("niproviderlist","defaultniprovider");
x.t("note","capabilities");
x.t("servicestate","acceptingrequests");
x.t("servicestate","value");
x.t("applications","hardcoded");
x.t("applications","specify");
x.t("non","interactive");
x.t("suspect","datastate");
x.t("statuscode","value");
x.t("edition","appendix");
x.t("training","examples");
x.t("utf-8","emaconfig");
x.t("consumerlist","default");
x.t("consumerlist","consumergroup");
x.t("consumerlist","consumer");
x.t("test_ni_pub","infofilter");
x.t("numbers","capabilities");
x.t(".q=i","[r]");
x.t("used","ommconsumer");
x.t("used","default");
x.t("used","provider");
x.t("used","instead");
x.t("used","named");
x.t("used","ommprovider");
x.t("service","possible");
x.t("service","down");
x.t("service","default");
x.t("service","publish");
x.t("service","domains");
x.t("service","accepts");
x.t("service","name");
x.t("service","means");
x.t("service","accept");
x.t("service","directory");
x.t("service","named");
x.t("service","service");
x.t("elements","directory");
x.t("[r]",".l=1");
x.t("[r]","function");
x.t("[r]",".push");
x.t("[r]",".q=i");
x.t("[r]","[r]");
x.t("setting","ommniproviderconfig::providername");
x.t("containing","single");
x.t("using","ommniproviderconfig::addadminmsg");
x.t("vendor","value");
x.t("a.async=1","a.src=g");
x.t("distributed","training");
x.t("channeldictionary","dictionarytype");
x.t("channeldictionary","possible");
x.t("channeldictionary","file");
x.t("channeldictionary","dictionary");
x.t("company","name");
x.t("dictionariesused","list");
x.t("dictionariesused","dictionariesusedentry");
x.t("dictionariesused","elements");
x.t("dictionariesused","vendor");
x.t("rwfenum_id3","dictionary");
x.t("googleanalyticsobject","[r]");
x.t("ommprovider","application");
x.t("names","rdm");
x.t("names","shown");
x.t("names","specified");
x.t("names","ignored");
x.t("names","optional");
x.t("names","numbers");
x.t("rwfenum_id4","dictionary");
x.t("/niprovider","niprovider");
x.t("/niprovider","/niproviderlist");
x.t("/niproviderlist","/niprovidergroup");
x.t("timeliness","value");
x.t("./rdmfielddictionary_id3","enumtypedeffilename");
x.t("./rdmfielddictionary_id4","enumtypedeffilename");
x.t("a.src=g","m.parentnode.insertbefore");
x.t("encoding","utf-8");
x.t("specify","ommniproviderconfig::providername");
x.t("specify","control");
x.t("specify","ommconsumerconfig::consumername");
x.t("specify","directory");
x.t("ema","qos");
x.t("ema","populate");
x.t("ema","default");
x.t("ema","status");
x.t("ema","assign");
x.t("ema","defaults");
x.t("ema","provides");
x.t("item","list");
x.t("item","data");
}
