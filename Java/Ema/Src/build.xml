<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="emaj">
	<property name="debuglevel" value="source,lines,vars"/>
	<property name="target" value="1.7"/>
	<property name="source" value="1.7"/>

	<property name="package" value="emaj3.1.2.G1.all.rrg"/>
	<property name="version" value="3.1.2.G1"/>
	<property name="vendor" value="Thomson Reuters"/>

	<property name="dist.dir" value="../"/>
	<property name="etaj.dist.dir" value="../../Eta"/>
	<property name="submodule.dir" value="../../../Elektron-SDK-BinaryPack/Java/Eta/Libs"/>
	<property name="eta.libs.dir" value="${etaj.dist.dir}/Libs"/>

	<property name="JUnit.reports.dir" value="${dist.dir}/buildreports/junit" />
	<property name="JUnit.html.dir" value="${JUnit.reports.dir}/html" />
	<property name="JUnit.xml.dir" value="${JUnit.reports.dir}/xml" />
	
	<property name="cobertura.dir" value="${eta.libs.dir}/cobertura"/>

	<property name="cobertura.reports.dir" value="${dist.dir}/buildreports/cobertura" />
	<property name="cobertura.xml.dir" value="${cobertura.reports.dir}/xml" />
	<property name="cobertura.html.dir" value="${cobertura.reports.dir}/html" />
	<property name="cobertura.src_copy.dir" value="${dist.dir}/buildreports/cobertura_src_copy" />

	<property name="libs.dir" value="${dist.dir}/Libs"/>
	<property name="src.dir" value="${dist.dir}/Src" />
	<property name="bin.dir" value="${dist.dir}/Src/bin"/>
	<property name="test.dir" value="${dist.dir}/TestTools/UnitTests/Tests/" />

	<property name="docs.dir" value="${dist.dir}/Docs" />
	<property name="src.main.java.dir" value="${dist.dir}/Src/main/java" />

	<!-- the root of all build and runtime dependiences -->
	<property name="ApacheClient.dir" value="${submodule.dir}/ApacheClient" />
	<property name="ApacheClientLocal.dir" value="${eta.libs.dir}/ApacheClient" />

	<property name="JUnit.dir" value="${eta.libs.dir}/JUnit" />

	<property name="bin.cobertura.dir" value="${src.dir}/cobertura_instrumented"/>
	
	<!-- the path to the http Apache Client runtime -->
	<path id="ApacheClient.classpath">
		<pathelement location="${ApacheClient.dir}/commons-codec-1.4.jar" />
		<pathelement location="${ApacheClient.dir}/commons-logging-1.1.1.jar" />
		<pathelement location="${ApacheClient.dir}/httpclient-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpclient-cache-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpcore-4.1.2.jar" />
		<pathelement location="${ApacheClient.dir}/httpmime-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/commons-codec-1.4.jar" />
		<pathelement location="${ApacheClientLocal.dir}/commons-logging-1.1.1.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpclient-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpclient-cache-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpcore-4.1.2.jar" />
		<pathelement location="${ApacheClientLocal.dir}/httpmime-4.1.2.jar" />
	</path>

	<path id="JUnit.classpath">
		<pathelement location="${JUnit.dir}/junit-4.12.jar" />
		<pathelement location="${JUnit.dir}/org.hamcrest.core_1.3.0.v201303031735.jar" />
	</path>

	<path id="emaj.classpath">
		<pathelement path="${src.dir}/bin"/>
		<pathelement path="${etaj.dist.dir}/Libs/upa.jar"/>
		<pathelement path="${etaj.dist.dir}/Libs/upaValueAdd.jar"/>
		<pathelement path="${libs.dir}/apache/commons-lang-2.6.jar"/>
		<pathelement path="${libs.dir}/apache/commons-configuration-1.10.jar"/>
		<pathelement path="${libs.dir}/apache/commons-logging-1.2.jar"/>
		<pathelement path="${libs.dir}/apache/org.apache.commons.collections.jar"/>
		<pathelement path="${libs.dir}/SLF4J/slf4j-1.7.12/slf4j-api-1.7.12.jar"/>
	</path>

	<target name="clean">
		<echo message="Cleaning up old build output" />
		<delete dir="${bin.dir}" quiet="true"/>
	</target>

	<target name="init">
		<echo message="Creating a directory for the compiler output" />
		<mkdir dir="${bin.dir}"/>
	</target>

	<target name="initJunit">
		<echo message="Creating directory for JUnit output"/>
		<delete dir="${Junit.xml.xir}"/>
		<mkdir dir="${JUnit.xml.dir}"/>
		<mkdir dir="${JUnit.html.dir}"/>
	</target>

	<target name="initCobertura">
		<echo message="Cleaning up old cobertura instrumented classes and report data" />
		<delete dir="${bin.cobertura.dir}" />
		<delete dir="${cobertura.xml.dir}" quiet="true"/>
		<delete dir="${cobertura.src_copy.dir}" quiet="true"/>
		<delete>
			<fileset dir="${dist.dir}">
				<include name="**/cobertura.ser"/>
			</fileset>
		</delete>
		<echo message="Creating directory for Cobertura output"/>
		<mkdir dir="${cobertura.xml.dir}" />
		<mkdir dir="${cobertura.html.dir}" />
		<mkdir dir="${cobertura.src_copy.dir}" />
		<mkdir dir="${bin.cobertura.dir}"/>
	</target>

	<target name="build-etajars" depends="init"> 
		<echo message="Building Eta upaValueAdd.jar" />
		<ant inheritAll="false" antfile="${etaj.dist.dir}/Source/build.xml" />
	</target>

	<target name="build-emaj-source" depends="build-etajars">
		<echo message="Building emaj src code" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${bin.dir}" source="${source}" target="${target}" includeantruntime="false">
			<exclude name="com/thomsonreuters/upa/valueadd/cache/**" />
			<src path="${src.dir}/main/java/interface"/>
			<src path="${src.dir}/main/java/impl"/>
			<classpath refid="emaj.classpath"/>
		</javac>

		<echo message="Building ema.jar" />
		<jar jarfile="${libs.dir}/ema.jar">
			<fileset dir="${bin.dir}">
				<include name="com/thomsonreuters/ema/access/**/*.class"/>
				<include name="com/thomsonreuters/ema/rdm/**/*.class"/>
				<include name="com/thomsonreuters/ema/domain/**/*.class"/>
			</fileset>
			<manifest>
				<attribute name="Build-Date" value="${TODAY}"/>
				<attribute name="Specification-Title" value="EMA JAVA"/>
				<attribute name="Specification-Version" value="${version}"/>
				<attribute name="Specification-Vendor" value="${vendor}"/>
				<attribute name="package_Version" value="${package}"/>
				<attribute name="Implementation-Version" value="${package}"/>
			</manifest>
		</jar>
	</target>

	<target name="build-junit" depends="clean, init, initJunit, build-etajars">
		<echo message="Build JUnit tests" />
		<javac debug="true" debuglevel="${debuglevel}" destdir="${bin.dir}" source="${source}" target="${target}" includeantruntime="false">
			<exclude name="com/thomsonreuters/upa/valueadd/cache/**" />
			<src path="${src.dir}/main/java/interface"/>
			<src path="${src.dir}/main/java/impl"/>
			<src path="${test.dir}"/>
			<classpath refid="emaj.classpath"/>
			<classpath refid="JUnit.classpath"/>
			<classpath refid="ApacheClient.classpath" />
		</javac>
	</target>

	<target name="package-docs" depends="init" >

		<echo message="EMA Java API javadocs" />

		<!-- the classpath for all packaging javadocs -->
		<path id="emaj.javadoc.classpath">
			<pathelement path="${libs.dir}/ema.jar"/>
			<pathelement path="${slf4j.dir}/slf4j-1.7.12/slf4j-api-1.7.12.jar"/>
			<pathelement path="${apache.dir}/commons-configuration-1.10/commons-configuration-1.10.jar"/>
		</path>

		<!-- sourcepath for emajava javadoc -->
		<path id="emaj.javadoc.emajava.sourcepath.interface">
			<pathelement path="${src.main.java.dir}/interface"/>
		</path>

		<!-- packages to be grouped in javadocs -->
		<property name="ACCESS" value="com.thomsonreuters.ema.access"/>
		<property name="RDM" value="com.thomsonreuters.ema.rdm"/>

		<!-- emajava do javadoc GitHub -->
		<javadoc sourcepathref="emaj.javadoc.emajava.sourcepath.interface"
				classpathref="emaj.javadoc.classpath"
				public="true"
				destdir="${docs.dir}/refman/emajava"
				doctitle="EMA JAVA ${version}"
				windowtitle="EMA">

			<group title="Access" packages="${ACCESS}" />
			<group title="RDM" packages="${RDM}" />
			<header>
				<![CDATA[<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>]]>
			</header>
			<footer>
				<![CDATA[<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>]]>
			</footer>
		</javadoc>

		<!-- create ema-javadoc.jar -->
		<echo message="Creating ema-javadoc.jar" />
		<jar jarfile="${libs.dir}/ema-javadoc.jar">
			<fileset dir="${docs.dir}/refman/emajava">
				<include name="**/**"/>
			</fileset>
			<manifest>
				<attribute name="Build-Date" value="${TODAY}"/>
				<attribute name="Specification-Title" value="EMA Java javadoc"/>
				<attribute name="Specification-Version" value="${version}"/>
				<attribute name="Specification-Vendor" value="${vendor}"/>
				<attribute name="package_Version" value="${package}"/>
				<attribute name="Implementation-Version" value="${package}"/>
			</manifest>
		</jar>

	</target>

	<target name="cobertura-instrument" depends="build-junit,initCobertura">
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura-2.1.1.jar"/>
				<include name="lib/**/*.jar"/>
			</fileset>
		</path>

		<path id="cobertura.auxpath">
			<fileset dir="${etaj.dist.dir}/Source/bin">
				<include name="**/*.class"/> 
			</fileset>
			<pathelement location="${etaj.dist.dir}/Source/bin"/>
			<fileset dir=".">
				<include name="**/*.class"/> 
			</fileset>
		</path>

		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>

		<echo message="instrumenting for code coverage"/>
		<cobertura-instrument todir="${bin.cobertura.dir}">
			<!-- The following line causes instrument to ignore any source line containing a reference to log4j, 
			for the purposes of coverage reporting. -->
			<ignore regex="org.apache.log4j.*" />
			<fileset dir="${bin.dir}">
				<include name="**/*.class"/>
			</fileset>
			<auxClasspath>
				<path refid="cobertura.auxpath" />
			</auxClasspath>
		</cobertura-instrument>
	</target>

	<!-- run this target to generate junit results only (no code coverage results)-->
	<target name="run-junit" depends="build-junit" >
		<echo message="Running EMA JUnit tests" />
		<junit fork="yes" haltonerror="false" haltonfailure="false" dir="../../../" forkmode="perTest" printSummary="yes" showoutput="true" outputtoformatters="true">

			<!-- enable assertions (Java's assert keyword) when running tests -->
			<jvmarg value="-enableassertions" />

			<classpath refid="JUnit.classpath" />
			<classpath refid="emaj.classpath"/>

			<batchtest todir="${JUnit.xml.dir}">
			<formatter type="xml" />
			<fileset dir="${test.dir}"><include name="**/RunAllTests.java" /></fileset>
			</batchtest>
		</junit>

		<echo message="creating JUnit html output"/>
		<junitreport todir="${JUnit.html.dir}">
			<fileset dir="${JUnit.xml.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="noframes" todir="${JUnit.html.dir}"/>
		</junitreport>
	</target>

	<!-- run this target to generate code coverage reports.
	Because junit needs to run to create the code coverage input, this
	target also creates the junit results-->
	<target name="cobertura-test-coverage">
		<path id="cobertura.classpath">
			<fileset dir="${cobertura.dir}">
				<include name="cobertura-2.1.1.jar"/>
				<include name="lib/**/*.jar"/>
			</fileset>
		</path>

		<path id="cobertura.auxpath">
			<fileset dir="${etaj.dist.dir}/Source/bin">
				<include name="**/*.class"/> 
			</fileset>
			<pathelement location="${etaj.dist.dir}/Source/bin"/>
			<fileset dir=".">
				<include name="**/*.class"/> 
			</fileset>
		</path>

		<taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
		
		<echo message="running instrumented EMA JUnit tests" />
		<junit fork="yes" haltonerror="false" haltonfailure="false" dir="../../../" forkmode="perTest" printSummary="yes" showoutput="true" outputtoformatters="true">

			<!-- enable assertions (Java's assert keyword) when running tests -->
			<jvmarg value="-enableassertions" />

			<classpath location="${bin.cobertura.dir}"/>
			<classpath refid="emaj.classpath"/>
			<classpath refid="cobertura.classpath"/>
			
			<sysproperty key="net.sourceforge.cobertura.datafile" file="${basedir}/cobertura.ser"/>

			<batchtest todir="${JUnit.xml.dir}">
				<formatter type="xml" />
				<fileset dir="${test.dir}">
					<include name="**/RunAllTests.java" />
				</fileset>
			</batchtest>
		</junit>

		<echo message="creating JUnit html output"/>
		<junitreport todir="${JUnit.html.dir}">
			<fileset dir="${JUnit.xml.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="noframes" todir="${JUnit.html.dir}"/>
		</junitreport>

		<!-- 
		Copy all source to a common directory.
		Works around an issue with Cobertura 2.1.1 where specifying multiple filesets
		does not work (https://github.com/cobertura/cobertura/issues/252 )
		-->
		<copy todir="${cobertura.src_copy.dir}">
			<fileset dir="${src.dir}/main/java/impl">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${src.dir}/main/java/interface">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${test.dir}/">
				<include name="**/*.java" />
			</fileset>
		</copy>
		
		<echo message="Merging cobertura .ser files"/>
		<cobertura-merge datafile="${cobertura.reports.dir}/cobertura.ser">
			<fileset dir="${dist.dir}">
				<include name="**/cobertura.ser"/>
			</fileset>
		</cobertura-merge>

		<echo message="creating code coverage report"/>
		<cobertura-report datafile="${cobertura.reports.dir}/cobertura.ser" destdir="${cobertura.xml.dir}" format="xml">
			<fileset dir="${cobertura.src_copy.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>
		
		<cobertura-report datafile="${cobertura.reports.dir}/cobertura.ser" destdir="${cobertura.html.dir}" format="html">
			<fileset dir="${cobertura.src_copy.dir}">
				<include name="**/*.java"/>
			</fileset>
		</cobertura-report>

	</target>

	<target depends="clean,build-emaj-source" name="all"/>
	<target depends="clean,build-emaj-source" name="build"/>
	<target depends="clean,cobertura-instrument" name="build-cobertura"/>
	<target depends="clean,cobertura-instrument,cobertura-test-coverage" name="run-cobertura-tests"/>

</project>
