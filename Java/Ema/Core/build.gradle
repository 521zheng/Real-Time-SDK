apply plugin: 'net.saliman.cobertura'

def package1 = 'emaj3.1.0.L1.all.rrg'
def version = '3.1.0.L1'
def vendor = 'Thomson Reuters'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

cobertura {

}

dependencies {
	// different version in ETA
	compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
	compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'

        compile project(':Eta:ValueAdd')

	testRuntime 'org.hamcrest:hamcrest-core:1.3'
	testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'

}

// ext is used to store project level properties
// we can use this shared manifest
ext.sharedManifest = manifest {
	attributes( 'Sealed': 'true',
		'Specification-Version': package1,
		'Specification-Vendor': vendor,
		'Specification-Title': 'EMA JAVA',
		'Implementation-Version': version,
		'Implementation-Vendor': vendor )
}

jar {
	doFirst { println 'Creating EMA jar file' }

	manifest { 
		from sharedManifest 
	}

	baseName = 'ema'
}

tasks.withType (Test) {
        jvmArgs "-enableassertions"
}

test {
	// exclude the utility class and the suite class
	exclude '**/TestUtilities.class'
	exclude '**/RunAllTests.class'
        // set to tru to see the junit stdoutput
        testLogging.showStandardStreams = false
}

javadoc {
	doFirst {
		println "Generating javadoc for EMA"
	}

	destinationDir = new File('Ema/Docs/refman/emajava/')
	title = "EMA JAVA " +  "${version}"

	exclude '**/*Impl.java'
	exclude '**/JUnit*.java'

	options.footer ('<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>')
	options.header ('<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>')

	options.group ('Access', 'com.thomsonreuters.ema.access')
	options.group ('RDM', 'com.thomsonreuters.ema.rdm')

	options.setWindowTitle ('EMA')
}

