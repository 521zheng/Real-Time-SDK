apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven-publish'

def package1 = 'emaj3.1.0.L1.all.rrg'
def ReleaseVersion = '3.1.0.L1'
def vendor = 'Thomson Reuters'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"


eclipse {
        project {
                name = 'ESDK-Ema-Src'
        }
}

cobertura {

}

publishing {
        publications {
                etaj(MavenPublication) {
                        groupId 'com.thomsonreuters.ema'
                        artifactId 'ema'
                        version "$ReleaseVersion"

                        from components.java
                }
        }
}

publishing {
        repositories {
                maven {
// publis to file for now, it does not seem to work with artifactory, I'm getting 409 error, credentails do work. 

//                      credentials {
//                              username project.properties.mavenUser
//                              password project.properties.mavenPassword
//                      }
// TODO 
// decide based on version string where to put the artifacts
//            if (project.version.endsWith("-SNAPSHOT")) {
 //               url project.someSnapshot
  //          } else {
   //             url project.someRelease
    //        }
//                        url "https://bams-amers-sami.int.thomsonreuters.com/artifactory/snapshot.maven.local/com/thomsonreuters/ESDK"
                        url "file:///local/smusial/TMP/"
                }
        }
}

dependencies {
	// different version in ETA
	compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
	compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
	compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'

        compile project(':Eta:ValueAdd')

	testRuntime 'org.hamcrest:hamcrest-core:1.3'
	testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'

}

// ext is used to store project level properties
// we can use this shared manifest
ext.sharedManifest = manifest {
	attributes( 'Sealed': 'true',
		'Specification-Version': package1,
		'Specification-Vendor': vendor,
		'Specification-Title': 'EMA JAVA',
		'Implementation-Version': ReleaseVersion,
		'Implementation-Vendor': vendor )
}

jar {
	doFirst { println 'Creating EMA jar file' }

	manifest { 
		from sharedManifest 
	}

        destinationDir = file("../Libs/")
	baseName = 'ema'
}

task cleanJar (type: Delete) {
        delete "${jar.archivePath}"
}

task cleanJavadoc (type: Delete) {
	delete ('../Docs/refman')
}

task cleanJavadocJar (type: Delete) {
	delete "${jar.destinationDir}/ema-javadoc.jar"
}

clean.dependsOn cleanJar, cleanJavadoc, cleanJavadocJar

test {
	// exclude the utility class and the suite class
	exclude '**/TestUtilities.class'
	exclude '**/RunAllTests.class'
        // set to true to see the junit stdoutput
        testLogging.showStandardStreams = false
        maxParallelForks = Runtime.runtime.availableProcessors()
}

javadoc {
	doFirst {
		println "Generating javadoc for EMA"
	}

	destinationDir = file('../Docs/refman/emajava/')
	title = "EMA JAVA " +  "${ReleaseVersion}"

	exclude '**/*Impl.java'
	exclude '**/JUnit*.java'

	options.footer ('<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>')
	options.header ('<a href="http://about.reuters.com/developer" target=_top>Thomson Reuters</a>')

	options.group ('Access', 'com.thomsonreuters.ema.access')
	options.group ('RDM', 'com.thomsonreuters.ema.rdm')

	options.setWindowTitle ('EMA')
}

task javadocJar (type: Jar, dependsOn: this.javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
	destinationDir = jar.destinationDir
	archiveName = 'ema-javadoc.jar'
}

artifacts {
	archives javadocJar
}

