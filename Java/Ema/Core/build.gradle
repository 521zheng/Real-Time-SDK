apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.refinitiv.ema"
archivesBaseName = "ema"
version "$SpecificationVersion"

publishing {
    publications{
        mavenJava(MavenPublication){

            groupId = group
            artifactId = archivesBaseName
            version = "$SpecificationVersion"
            from components.java

            pom {
                name = "$archivesBaseName"
                packaging = 'jar'
                url = 'https://github.com/Refinitiv/Real-Time-SDK'
                description = 'Enterprise Message API (EMA) Java Edition'

                scm {
                    connection = 'scm:git:git://github.com/Refinitiv/Real-Time-SDK.git'
                    developerConnection = 'scm:git:ssh://github.com:Refinitiv/Real-Time-SDK.git'
                    url = 'http://github.com/Refinitiv/Real-Time-SDK/tree/master'
                }

                developers {
                    developer {
                        organization = 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "repository"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
        maven {
            name = "snapshotRepository"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

cobertura {
     coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'RTSDK-Ema-Src'
    }
}

dependencies {
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
    implementation group: 'org.apache.commons', name: 'commons-configuration2', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.32'

    implementation project(':Eta:ValueAdd')
    implementation project(':Eta:Core')

    testRuntimeOnly 'org.hamcrest:hamcrest-core:1.3'
}

ext.sharedManifest = manifest {
		attributes( 'Sealed': 'true',
			'Build-Date': BuildDate,
			'Specification-Version': SpecificationVersion,
			'Specification-Vendor': vendor,
			'Implementation-Title': group,
			'Implementation-Version': emaImplementationVersion,
			'Implementation-Vendor': vendor )
}

jar {
	doFirst { println 'Creating EMA jar file' }

	manifest { 
		attributes 'Specification-Title': 'Enterprise Message API (EMA) Java Edition'
				from sharedManifest 
	}

    destinationDirectory.set(file("../Libs/"))
    archiveBaseName.convention('ema');
    archiveBaseName.set('ema');
}

task cleanJar (type: Delete) {
        delete "${jar.archiveFile}"
}

task cleanJavadoc (type: Delete) {
	delete ('../Docs/refman')
}

task cleanJavadocJar (type: Delete) {
	delete "${jar.destinationDirectory}/ema-javadoc.jar"
}

clean.dependsOn cleanJar, cleanJavadoc, cleanJavadocJar

test {
	// exclude the utility class and the suite class
	exclude '**/TestUtilities.class'
	exclude '**/RunAllTests.class'
	exclude '**/JUnitTestConnect.class'
    forkEvery = 1
    // set to true to see the junit stdoutput
    testLogging.showStandardStreams = false
    maxParallelForks = 1
}

javadoc {
    doFirst {
        println "Generating javadoc for EMA"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/emajava/')
    title = "Enterprise Message API (EMA) " +  "${SpecificationVersion}" + " - Java Edition"

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.group ('Access', 'com.refinitiv.ema.access')
    options.group ('RDM', 'com.refinitiv.ema.rdm')
    options.group ('Login', 'com.refinitiv.ema.domain.login')

    options.setWindowTitle ('EMA')
}

task javadocJar (type: Jar, dependsOn: this.javadoc) {
    archiveClassifier.convention('javadoc');
    archiveClassifier.set('javadoc');
    from javadoc.destinationDir
    destinationDirectory.set(jar.destinationDirectory)

    manifest {
        attributes 'Specification-Title': 'Enterprise Message API (EMA) Java Edition'
            from sharedManifest
    }
}

task sourcesJar(type: Jar) {
        archiveClassifier.convention('sources');
        archiveClassifier.set('sources');
        from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

repositories {
    mavenCentral()
}

