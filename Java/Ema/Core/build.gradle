apply plugin: 'net.saliman.cobertura'
apply plugin: 'maven'
apply plugin: 'signing'

def jenkinsBuild = System.getenv("BUILD_NUMBER") ?: "0"

group = "com.thomsonreuters.ema"
archivesBaseName = "ema"
version "$SpecificationVersion"

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty('ossrhUsername'), password: findProperty('ossrhPassword'))
            }

            pom.project {
                name "$archivesBaseName"
                    packaging 'jar'
                    url 'https://github.com/Refinitiv/Elektron-SDK'
                    description 'Elektron Message API (EMA) Java Edition'

                    scm {
                        connection 'scm:git:git://github.com/Refinitiv/Elektron-SDK.git'
                            developerConnection 'scm:git:ssh://github.com:Refinitiv/Elektron-SDK.git'
                            url 'http://github.com/Refinitiv/Elektron-SDK/tree/master'
                    }

                developers {
                    developer {
                        organization 'Refinitiv'
                    }
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }
}

signing {
    sign configurations.archives
}

cobertura {
     coverageFormats = ['html', 'xml']
}

eclipse {
    project {
        name = 'ESDK-Ema-Src'
    }
}

dependencies {
    compile group: 'commons-logging', name: 'commons-logging', version: '1.2'
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
        compile group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.12'
        compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'
        compile group: 'commons-collections', name: 'commons-collections', version: '3.2.2'

        compile project(':Eta:ValueAdd')

        testRuntime 'org.hamcrest:hamcrest-core:1.3'
        testRuntime group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
}

ext.sharedManifest = manifest {
		attributes( 'Sealed': 'true',
			'Build-Date': BuildDate,
			'Specification-Version': SpecificationVersion,
			'Specification-Vendor': vendor,
			'Implementation-Title': group,
			'Implementation-Version': emaImplementationVersion,
			'Implementation-Vendor': vendor )
}

jar {
	doFirst { println 'Creating EMA jar file' }

	manifest { 
		attributes 'Specification-Title': 'Elektron Message API (EMA) Java Edition'
				from sharedManifest 
	}

	destinationDir = file("../Libs/")
	baseName = 'ema'
}

task cleanJar (type: Delete) {
        delete "${jar.archivePath}"
}

task cleanJavadoc (type: Delete) {
	delete ('../Docs/refman')
}

task cleanJavadocJar (type: Delete) {
	delete "${jar.destinationDir}/ema-javadoc.jar"
}

clean.dependsOn cleanJar, cleanJavadoc, cleanJavadocJar

test {
	// exclude the utility class and the suite class
	exclude '**/TestUtilities.class'
	exclude '**/RunAllTests.class'
	exclude '**/JUnitTestConnect.class'
	// set to true to see the junit stdoutput
	testLogging.showStandardStreams = false
	maxParallelForks = Runtime.runtime.availableProcessors()
}

javadoc {
    doFirst {
        println "Generating javadoc for EMA"
    }

    exclude '**/*Impl.java'
    exclude '**/JUnit*.java'

    destinationDir = file('../Docs/refman/emajava/')
    title = "Elektron Message API (EMA) " +  "${SpecificationVersion}" + " - Java Edition" 

    options.footer ("${javadoc_footer}")
    options.header ("${javadoc_header}")
    options.bottom ("${javadoc_bottom}")

    options.group ('Access', 'com.thomsonreuters.ema.access')
    options.group ('RDM', 'com.thomsonreuters.ema.rdm')
    options.group ('Login', 'com.thomsonreuters.ema.domain.login')

    options.setWindowTitle ('EMA')
}

task javadocJar (type: Jar, dependsOn: this.javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    destinationDir = jar.destinationDir

    manifest {
        attributes 'Specification-Title': 'Elektron Message API (EMA) Java Edition'
            from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
        from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

