import org.ajoberstar.grgit.*

buildscript {
        repositories {
                mavenCentral()
                maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        }

        dependencies {
                classpath "net.saliman:gradle-cobertura-plugin:2.5.1"
                classpath "org.ajoberstar:gradle-git:1.6.0"
        }
}

plugins {
        id 'net.saliman.cobertura' version '2.5.1'
}

apply plugin: 'net.saliman.cobertura'

subprojects {
	apply plugin: 'java'

        sourceCompatibility = 1.7
        targetCompatibility = 1.7

	apply plugin: 'eclipse'

	repositories {
	    mavenCentral()
	}
}

ext.YEAR = '2018'
// NOTE! please update the tag in the BinaryPack repo
// for a new release below in the cloneBinaryPack task.
ext.BuildDate = 'Tue May 29 10:35:01 CDT ' + "$YEAR"
ext.SpecificationVersion = '3.2.0.2'
ext.SpecificationVersionShort = '3.2.0'
// Comment out line below to publish offical release
// ext.SpecificationVersion = "$SpecificationVersion" + "-SNAPSHOT"
ext.etaImplementationVersion = 'etaj' + "$SpecificationVersionShort" + '.G1.all.gload'
ext.emaImplementationVersion = 'emaj' + "$SpecificationVersionShort" + '.G1.all.gload'
ext.vendor = 'Thomson Reuters'
ext.javadoc_footer = '<a href="https://developers.thomsonreuters.com/" target=_top>Thomson Reuters</a>'
ext.javadoc_header = '<a href="https://developers.thomsonreuters.com/" target=_top>Thomson Reuters</a>'
ext.javadoc_bottom = '<i>Copyright @ ' + "$YEAR" + ' Thomson Reuters. All Rights Reserved.</i>'

task cloneBinaryPack {
    description 'This task clones the Elektron-SDK-BinaryPack from GitHub. The Binary Pack has JNIs that are needed for multicast connection'
    doLast {
        // check if we are in GSG package
        File gsgDir = file('../Elektron-SDK-BinaryPack')
        if (!gsgDir.exists()) {
            // if not in GSG package try to clone BinaryPack
            File dir = file('../Elektron-SDK-BinaryPack')
            if (!dir.exists()) {
                println "Cloning Elektron-SDK-BinaryPack from GitHub, please wait."
                def grgit = Grgit.clone(dir: dir, uri: 'https://github.com/thomsonreuters/Elektron-SDK-BinaryPack.git')
                grgit.checkout(branch: 'Elektron-SDK_1.2.0.1.L1', createBranch: false)
                println "Done cloning Elektron-SDK-BinaryPack from GitHub."
            }
        }
        else
        {
            println "Elektron-SDK-BinaryPack already exists, skip cloning."
        }
    }
}

allprojects {
	dependencies {

		compile group: 'commons-codec', name: 'commons-codec', version: '1.4'
		compile group: 'commons-logging', name: 'commons-logging', version: '1.1.1'

		compile group: 'junit', name: 'junit', version: '4.12'

		testCompile group: 'junit', name: 'junit', version: '4.12'
	}

	compileJava {
	        options.compilerArgs += ["-Xlint:cast"]
	        options.compilerArgs += ["-Xlint:deprecation"]
	        options.compilerArgs += ["-Xlint:divzero"]
	        options.compilerArgs += ["-Xlint:empty"]
	        options.compilerArgs += ["-Xlint:fallthrough"]
	        options.compilerArgs += ["-Xlint:finally"]
	        options.compilerArgs += ["-Xlint:overrides"]
	        options.compilerArgs += ["-Xlint:path"]
	        options.compilerArgs += ["-Xlint:serial"]
	        options.compilerArgs += ["-Xlint:unchecked"]
	}

        tasks.withType( JavaCompile ) {
                dependsOn cloneBinaryPack
                options.fork = true
                options.incremental = true
        }

	// set the jvmArgs and commandLineArgs for all applications
	tasks.withType ( JavaExec ) {
	        if ( project.hasProperty("vmArgs") ) {
        	        jvmArgs Eval.me( buildArgsList( vmArgs ) )
        	}

	        if ( project.hasProperty("commandLineArgs") ) {
        	        args Eval.me( buildArgsList( commandLineArgs ) )
       		}
	}

	// set the jvmArgs for junit
	tasks.withType ( Test ) {
	        if ( project.hasProperty("vmArgs") ) {
        	        jvmArgs Eval.me( buildArgsList( vmArgs ) )
        	}

		minHeapSize = "1024m"
		maxHeapSize = "2048m"
	}
}

task wrapper( type: Wrapper ) {
	gradleVersion = '4.2.1'
}

task uploadAll ( ) {
	dependsOn ':Eta:AnsiPage:uploadArchives'
	dependsOn ':Eta:Core:uploadArchives'
	dependsOn ':Eta:ValueAdd:uploadArchives'
	dependsOn ':Eta:ValueAddCache:uploadArchives'
	dependsOn ':Ema:Core:uploadArchives'

	description 'Uploads All artifacts to maven central'
}

// this method creates a list of arguments that are used in setting the jvmArgs and commandLineArgs
def buildArgsList ( options ) {
	// remove spaces 
	def arguments = options.tokenize()

		// create a string that can be used by Eval 
		def cla = "["
		// go through the list to get each argument
		arguments.each {
			cla += "'" + "${it}" + "',"
		}

	// remove last "," add "]" and set the args 
	return cla.substring( 0, cla.lastIndexOf(',') ) + "]"
}

// can't use a dynamic date for manifest since it triggers a build each time even when nothing changed
def getDate() {
	def date = new Date()
	def formattedDate = date.format('E MMM dd HH:mm:ss z yyyy ')
	return formattedDate
}
// disable creating empty Java.jar file 
jar.enabled = false
